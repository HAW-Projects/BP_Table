
Sense.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00803e00  00001ba6  00001c5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000006  00009ba0  00001ba0  00001c54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000053  00803e3e  00803e3e  00001c98  2**0
                  ALLOC
  4 .comment      00000060  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000368  00000000  00000000  00001d38  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006096  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000025ce  00000000  00000000  00008136  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001896  00000000  00000000  0000a704  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000630  00000000  00000000  0000bf9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002d74  00000000  00000000  0000c5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f2d  00000000  00000000  0000f340  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002a0  00000000  00000000  0001026d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	31 c0       	rjmp	.+98     	; 0x70 <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	fc c2       	rjmp	.+1528   	; 0x61c <__vector_17>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	75 c4       	rjmp	.+2282   	; 0x912 <__vector_19>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e6 ea       	ldi	r30, 0xA6	; 166
      48:	fb e1       	ldi	r31, 0x1B	; 27
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	ae 33       	cpi	r26, 0x3E	; 62
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	ae e3       	ldi	r26, 0x3E	; 62
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a1 39       	cpi	r26, 0x91	; 145
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	04 d1       	rcall	.+520    	; 0x270 <main>
      68:	99 cd       	rjmp	.-1230   	; 0xfffffb9c <__eeprom_end+0xff7efb9c>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void) {
    system_init();
      6c:	69 d3       	rcall	.+1746   	; 0x740 <system_init>
      6e:	08 95       	ret

00000070 <__vector_6>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_CNT_vect)
{
      70:	1f 92       	push	r1
      72:	0f 92       	push	r0
      74:	0f b6       	in	r0, 0x3f	; 63
      76:	0f 92       	push	r0
      78:	11 24       	eor	r1, r1
      7a:	2f 93       	push	r18
      7c:	3f 93       	push	r19
      7e:	4f 93       	push	r20
      80:	5f 93       	push	r21
      82:	6f 93       	push	r22
      84:	7f 93       	push	r23
      86:	8f 93       	push	r24
      88:	9f 93       	push	r25
      8a:	af 93       	push	r26
      8c:	bf 93       	push	r27
      8e:	ef 93       	push	r30
      90:	ff 93       	push	r31

	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
      92:	8e d2       	rcall	.+1308   	; 0x5b0 <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
      94:	82 e0       	ldi	r24, 0x02	; 2
      96:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <gain_setting_int_cap+0x7f65a3>
}
      9a:	ff 91       	pop	r31
      9c:	ef 91       	pop	r30
      9e:	bf 91       	pop	r27
      a0:	af 91       	pop	r26
      a2:	9f 91       	pop	r25
      a4:	8f 91       	pop	r24
      a6:	7f 91       	pop	r23
      a8:	6f 91       	pop	r22
      aa:	5f 91       	pop	r21
      ac:	4f 91       	pop	r20
      ae:	3f 91       	pop	r19
      b0:	2f 91       	pop	r18
      b2:	0f 90       	pop	r0
      b4:	0f be       	out	0x3f, r0	; 63
      b6:	0f 90       	pop	r0
      b8:	1f 90       	pop	r1
      ba:	18 95       	reti

000000bc <ADC_0_init>:
 * 2. If supported by the clock system, disables the clock to the ADC
 *
 * \return Nothing
 */
void ADC_0_disable() {
    ADC0.CTRLA &= ~ADC_ENABLE_bm;
      bc:	e0 e0       	ldi	r30, 0x00	; 0
      be:	f6 e0       	ldi	r31, 0x06	; 6
      c0:	16 8a       	std	Z+22, r1	; 0x16
      c2:	11 82       	std	Z+1, r1	; 0x01
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	82 83       	std	Z+2, r24	; 0x02
      c8:	13 82       	std	Z+3, r1	; 0x03
      ca:	14 82       	std	Z+4, r1	; 0x04
      cc:	14 86       	std	Z+12, r1	; 0x0c
      ce:	11 86       	std	Z+9, r1	; 0x09
      d0:	12 86       	std	Z+10, r1	; 0x0a
      d2:	8a e0       	ldi	r24, 0x0A	; 10
      d4:	86 83       	std	Z+6, r24	; 0x06
      d6:	15 82       	std	Z+5, r1	; 0x05
      d8:	14 8a       	std	Z+20, r1	; 0x14
      da:	15 8a       	std	Z+21, r1	; 0x15
      dc:	12 8a       	std	Z+18, r1	; 0x12
      de:	13 8a       	std	Z+19, r1	; 0x13
      e0:	85 e0       	ldi	r24, 0x05	; 5
      e2:	80 83       	st	Z, r24
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	08 95       	ret

000000e8 <ADC_0_start_conversion>:
 * \param[in] channel The ADC channel to start conversion on
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel) {
    ADC0.MUXPOS = channel;
      e8:	e0 e0       	ldi	r30, 0x00	; 0
      ea:	f6 e0       	ldi	r31, 0x06	; 6
      ec:	86 83       	std	Z+6, r24	; 0x06
    ADC0.COMMAND = ADC_STCONV_bm;
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	80 87       	std	Z+8, r24	; 0x08
      f2:	08 95       	ret

000000f4 <ADC_0_is_conversion_done>:
 * \return The status of ADC converison done check
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done() {
    return (ADC0.INTFLAGS & ADC_RESRDY_bm);
      f4:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <gain_setting_int_cap+0x7f6a6b>
}
      f8:	81 70       	andi	r24, 0x01	; 1
      fa:	08 95       	ret

000000fc <ADC_0_get_conversion_result>:
 * \brief Read a conversion result from ADC_0
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void) {
    return (ADC0.RES);
      fc:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <gain_setting_int_cap+0x7f6a70>
     100:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <gain_setting_int_cap+0x7f6a71>
}
     104:	08 95       	ret

00000106 <ADC_0_get_conversion>:
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel) {
    adc_result_t res;

    ADC_0_start_conversion(channel);
     106:	f0 df       	rcall	.-32     	; 0xe8 <ADC_0_start_conversion>
    while (!ADC_0_is_conversion_done())
     108:	f5 df       	rcall	.-22     	; 0xf4 <ADC_0_is_conversion_done>
     10a:	88 23       	and	r24, r24
     10c:	e9 f3       	breq	.-6      	; 0x108 <ADC_0_get_conversion+0x2>
        ;
    res = ADC_0_get_conversion_result();
     10e:	f6 df       	rcall	.-20     	; 0xfc <ADC_0_get_conversion_result>
    ADC0.INTFLAGS |= ADC_RESRDY_bm;
     110:	e0 e0       	ldi	r30, 0x00	; 0
     112:	f6 e0       	ldi	r31, 0x06	; 6
     114:	23 85       	ldd	r18, Z+11	; 0x0b
     116:	21 60       	ori	r18, 0x01	; 1
     118:	23 87       	std	Z+11, r18	; 0x0b
    return res;
}
     11a:	08 95       	ret

0000011c <I2C_0_stop_handler>:

    I2C_0_send_ack();
}

void I2C_0_stop_handler() {
    commandState = NEWCOMMAND;
     11c:	10 92 40 3e 	sts	0x3E40, r1	; 0x803e40 <commandState>
     120:	08 95       	ret

00000122 <I2C_0_error_handler>:
}

void I2C_0_error_handler() {
    // reset
    commandState = NEWCOMMAND;
     122:	10 92 40 3e 	sts	0x3E40, r1	; 0x803e40 <commandState>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     126:	89 b1       	in	r24, 0x09	; 9
     128:	87 7f       	andi	r24, 0xF7	; 247
     12a:	89 b9       	out	0x09, r24	; 9
     12c:	08 95       	ret

0000012e <I2C_0_address_handler>:
    {X_NONE, Y(0), 0, PRSC_DIV_SEL_16, NODE_GAIN(GAIN_1, GAIN_1), FILTER_LEVEL_16},
    {X_NONE, Y(1), 0, PRSC_DIV_SEL_16, NODE_GAIN(GAIN_1, GAIN_1), FILTER_LEVEL_16},
    {X_NONE, Y(2), 0, PRSC_DIV_SEL_16, NODE_GAIN(GAIN_1, GAIN_1), FILTER_LEVEL_16}};

void I2C_0_address_handler() {
    I2C_0_send_ack();
     12e:	5b d3       	rcall	.+1718   	; 0x7e6 <I2C_0_send_ack>
     130:	08 95       	ret

00000132 <I2C_0_read_handler>:
}

void I2C_0_read_handler() {
    I2C_0_write(senseState);
     132:	80 91 42 3e 	lds	r24, 0x3E42	; 0x803e42 <senseState>
     136:	4a d3       	rcall	.+1684   	; 0x7cc <I2C_0_write>
    waitForSenseRead = false;
     138:	10 92 3e 3e 	sts	0x3E3E, r1	; 0x803e3e <__data_end>
     13c:	89 b1       	in	r24, 0x09	; 9
     13e:	87 7f       	andi	r24, 0xF7	; 247
     140:	89 b9       	out	0x09, r24	; 9
     142:	08 95       	ret

00000144 <reset>:
    sense_trig_set_level(0);
}

void reset() {
    _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	88 ed       	ldi	r24, 0xD8	; 216
     148:	84 bf       	out	0x34, r24	; 52
     14a:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <gain_setting_int_cap+0x7f64a1>
     14e:	08 95       	ret

00000150 <touch_config>:
}

void touch_config() {
    ptc_seq_node_cfg1[0].node_gain = NODE_GAIN(touchAnalogGain, touchDigitalGain);
     150:	80 91 46 3e 	lds	r24, 0x3E46	; 0x803e46 <touchAnalogGain>
     154:	20 e1       	ldi	r18, 0x10	; 16
     156:	82 9f       	mul	r24, r18
     158:	c0 01       	movw	r24, r0
     15a:	11 24       	eor	r1, r1
     15c:	90 91 45 3e 	lds	r25, 0x3E45	; 0x803e45 <touchDigitalGain>
     160:	89 2b       	or	r24, r25
     162:	e0 e0       	ldi	r30, 0x00	; 0
     164:	fe e3       	ldi	r31, 0x3E	; 62
     166:	84 83       	std	Z+4, r24	; 0x04
    ptc_seq_node_cfg1[1].node_gain = NODE_GAIN(touchAnalogGain, touchDigitalGain);
     168:	80 91 46 3e 	lds	r24, 0x3E46	; 0x803e46 <touchAnalogGain>
     16c:	20 e1       	ldi	r18, 0x10	; 16
     16e:	82 9f       	mul	r24, r18
     170:	c0 01       	movw	r24, r0
     172:	11 24       	eor	r1, r1
     174:	90 91 45 3e 	lds	r25, 0x3E45	; 0x803e45 <touchDigitalGain>
     178:	89 2b       	or	r24, r25
     17a:	82 87       	std	Z+10, r24	; 0x0a
    ptc_seq_node_cfg1[2].node_gain = NODE_GAIN(touchAnalogGain, touchDigitalGain);
     17c:	80 91 46 3e 	lds	r24, 0x3E46	; 0x803e46 <touchAnalogGain>
     180:	20 e1       	ldi	r18, 0x10	; 16
     182:	82 9f       	mul	r24, r18
     184:	c0 01       	movw	r24, r0
     186:	11 24       	eor	r1, r1
     188:	90 91 45 3e 	lds	r25, 0x3E45	; 0x803e45 <touchDigitalGain>
     18c:	89 2b       	or	r24, r25
     18e:	80 8b       	std	Z+16, r24	; 0x10

    ptc_seq_node_cfg1[0].node_oversampling = touchFilterLevel;
     190:	80 91 44 3e 	lds	r24, 0x3E44	; 0x803e44 <touchFilterLevel>
     194:	85 83       	std	Z+5, r24	; 0x05
    ptc_seq_node_cfg1[1].node_oversampling = touchFilterLevel;
     196:	80 91 44 3e 	lds	r24, 0x3E44	; 0x803e44 <touchFilterLevel>
     19a:	83 87       	std	Z+11, r24	; 0x0b
    ptc_seq_node_cfg1[2].node_oversampling = touchFilterLevel;
     19c:	80 91 44 3e 	lds	r24, 0x3E44	; 0x803e44 <touchFilterLevel>
     1a0:	81 8b       	std	Z+17, r24	; 0x11
     1a2:	08 95       	ret

000001a4 <I2C_0_write_handler>:
}
void I2C_0_write_handler() {

    // Read
    if (commandState == NEWCOMMAND) {
     1a4:	80 91 40 3e 	lds	r24, 0x3E40	; 0x803e40 <commandState>
     1a8:	81 11       	cpse	r24, r1
     1aa:	39 c0       	rjmp	.+114    	; 0x21e <__DATA_REGION_LENGTH__+0x1e>
        command = I2C_0_read();
     1ac:	0c d3       	rcall	.+1560   	; 0x7c6 <I2C_0_read>
     1ae:	80 93 41 3e 	sts	0x3E41, r24	; 0x803e41 <command>

        // direct Command?
        switch (command) {
     1b2:	80 91 41 3e 	lds	r24, 0x3E41	; 0x803e41 <command>
     1b6:	8d 38       	cpi	r24, 0x8D	; 141
     1b8:	50 f4       	brcc	.+20     	; 0x1ce <I2C_0_write_handler+0x2a>
     1ba:	8a 38       	cpi	r24, 0x8A	; 138
     1bc:	60 f5       	brcc	.+88     	; 0x216 <__DATA_REGION_LENGTH__+0x16>
     1be:	80 31       	cpi	r24, 0x10	; 16
     1c0:	d9 f0       	breq	.+54     	; 0x1f8 <I2C_0_write_handler+0x54>
     1c2:	08 f4       	brcc	.+2      	; 0x1c6 <I2C_0_write_handler+0x22>
     1c4:	53 c0       	rjmp	.+166    	; 0x26c <__DATA_REGION_LENGTH__+0x6c>
     1c6:	81 58       	subi	r24, 0x81	; 129
     1c8:	83 30       	cpi	r24, 0x03	; 3
     1ca:	28 f1       	brcs	.+74     	; 0x216 <__DATA_REGION_LENGTH__+0x16>
     1cc:	4f c0       	rjmp	.+158    	; 0x26c <__DATA_REGION_LENGTH__+0x6c>
     1ce:	81 3f       	cpi	r24, 0xF1	; 241
     1d0:	69 f0       	breq	.+26     	; 0x1ec <I2C_0_write_handler+0x48>
     1d2:	18 f4       	brcc	.+6      	; 0x1da <I2C_0_write_handler+0x36>
     1d4:	80 3f       	cpi	r24, 0xF0	; 240
     1d6:	31 f0       	breq	.+12     	; 0x1e4 <I2C_0_write_handler+0x40>
     1d8:	49 c0       	rjmp	.+146    	; 0x26c <__DATA_REGION_LENGTH__+0x6c>
     1da:	8a 3f       	cpi	r24, 0xFA	; 250
     1dc:	b9 f0       	breq	.+46     	; 0x20c <__DATA_REGION_LENGTH__+0xc>
     1de:	8b 3f       	cpi	r24, 0xFB	; 251
     1e0:	c1 f0       	breq	.+48     	; 0x212 <__DATA_REGION_LENGTH__+0x12>
     1e2:	44 c0       	rjmp	.+136    	; 0x26c <__DATA_REGION_LENGTH__+0x6c>
            case SETMODEIR: mode = RUNIR; break;
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	80 93 3f 3e 	sts	0x3E3F, r24	; 0x803e3f <mode>
     1ea:	40 c0       	rjmp	.+128    	; 0x26c <__DATA_REGION_LENGTH__+0x6c>
            case SETMODETOUCH:
                touch_config();
     1ec:	b1 df       	rcall	.-158    	; 0x150 <touch_config>
                touch_init();
     1ee:	ac d1       	rcall	.+856    	; 0x548 <touch_init>
                mode = RUNTOUCH;
     1f0:	82 e0       	ldi	r24, 0x02	; 2
     1f2:	80 93 3f 3e 	sts	0x3E3F, r24	; 0x803e3f <mode>
                break;
     1f6:	3a c0       	rjmp	.+116    	; 0x26c <__DATA_REGION_LENGTH__+0x6c>
            case RECALIBRATETOUCH:
                calibrate_node(0);
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	f8 d1       	rcall	.+1008   	; 0x5ee <calibrate_node>
                calibrate_node(1);
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	f5 d1       	rcall	.+1002   	; 0x5ee <calibrate_node>
                calibrate_node(2);
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	f2 d1       	rcall	.+996    	; 0x5ee <calibrate_node>
                break;
     20a:	30 c0       	rjmp	.+96     	; 0x26c <__DATA_REGION_LENGTH__+0x6c>
            case RECALIBRATEIR:; break;
            case START: waitForController = false; break;
     20c:	10 92 12 3e 	sts	0x3E12, r1	; 0x803e12 <waitForController>
     210:	2d c0       	rjmp	.+90     	; 0x26c <__DATA_REGION_LENGTH__+0x6c>
            case RESET: reset(); break;
     212:	98 df       	rcall	.-208    	; 0x144 <reset>
     214:	2b c0       	rjmp	.+86     	; 0x26c <__DATA_REGION_LENGTH__+0x6c>
            case SETTOUCHDIGITALGAIN:
            case SETTOUCHFILTERLEVEL:

            case SETIRTRESHOLD:
            case SETIRAVG:
            case SETIRDELAY: commandState = WAITFORDATA; break;
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 93 40 3e 	sts	0x3E40, r24	; 0x803e40 <commandState>
     21c:	27 c0       	rjmp	.+78     	; 0x26c <__DATA_REGION_LENGTH__+0x6c>

            default: break;
        }
    }
    else if (commandState == WAITFORDATA) {
     21e:	80 91 40 3e 	lds	r24, 0x3E40	; 0x803e40 <commandState>
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	19 f5       	brne	.+70     	; 0x26c <__DATA_REGION_LENGTH__+0x6c>

        uint8_t readData = I2C_0_read();
     226:	cf d2       	rcall	.+1438   	; 0x7c6 <I2C_0_read>
        // Value
        switch (command) {
     228:	90 91 41 3e 	lds	r25, 0x3E41	; 0x803e41 <command>
     22c:	93 38       	cpi	r25, 0x83	; 131
     22e:	99 f0       	breq	.+38     	; 0x256 <__DATA_REGION_LENGTH__+0x56>
     230:	28 f4       	brcc	.+10     	; 0x23c <__DATA_REGION_LENGTH__+0x3c>
     232:	91 38       	cpi	r25, 0x81	; 129
     234:	51 f0       	breq	.+20     	; 0x24a <__DATA_REGION_LENGTH__+0x4a>
     236:	92 38       	cpi	r25, 0x82	; 130
     238:	59 f0       	breq	.+22     	; 0x250 <__DATA_REGION_LENGTH__+0x50>
     23a:	16 c0       	rjmp	.+44     	; 0x268 <__DATA_REGION_LENGTH__+0x68>
     23c:	9b 38       	cpi	r25, 0x8B	; 139
     23e:	81 f0       	breq	.+32     	; 0x260 <__DATA_REGION_LENGTH__+0x60>
     240:	9c 38       	cpi	r25, 0x8C	; 140
     242:	81 f0       	breq	.+32     	; 0x264 <__DATA_REGION_LENGTH__+0x64>
     244:	9a 38       	cpi	r25, 0x8A	; 138
     246:	81 f4       	brne	.+32     	; 0x268 <__DATA_REGION_LENGTH__+0x68>
     248:	09 c0       	rjmp	.+18     	; 0x25c <__DATA_REGION_LENGTH__+0x5c>
            case SETIRTRESHOLD: irThreshold = readData; break;
     24a:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <irThreshold>
     24e:	0c c0       	rjmp	.+24     	; 0x268 <__DATA_REGION_LENGTH__+0x68>
            case SETIRAVG: irSamples = readData; break;
     250:	80 93 13 3e 	sts	0x3E13, r24	; 0x803e13 <irSamples>
     254:	09 c0       	rjmp	.+18     	; 0x268 <__DATA_REGION_LENGTH__+0x68>
            case SETIRDELAY: irDelay = readData; break;
     256:	80 93 47 3e 	sts	0x3E47, r24	; 0x803e47 <irDelay>
     25a:	06 c0       	rjmp	.+12     	; 0x268 <__DATA_REGION_LENGTH__+0x68>
            case SETTOUCHANALOGGAIN: touchAnalogGain = readData;
     25c:	80 93 46 3e 	sts	0x3E46, r24	; 0x803e46 <touchAnalogGain>
            case SETTOUCHDIGITALGAIN: touchDigitalGain = readData;
     260:	80 93 45 3e 	sts	0x3E45, r24	; 0x803e45 <touchDigitalGain>
            case SETTOUCHFILTERLEVEL: touchFilterLevel = readData;
     264:	80 93 44 3e 	sts	0x3E44, r24	; 0x803e44 <touchFilterLevel>

            default: break;
        }

        commandState = NEWCOMMAND;
     268:	10 92 40 3e 	sts	0x3E40, r1	; 0x803e40 <commandState>

        // end command
    }

    I2C_0_send_ack();
     26c:	bc d2       	rcall	.+1400   	; 0x7e6 <I2C_0_send_ack>
     26e:	08 95       	ret

00000270 <main>:

int main(void) {

    //// Initializes MCU, drivers and middleware ////

    atmel_start_init();
     270:	fd de       	rcall	.-518    	; 0x6c <atmel_start_init>
    cpu_irq_enable();
     272:	78 94       	sei
     274:	89 b1       	in	r24, 0x09	; 9
     276:	87 7f       	andi	r24, 0xF7	; 247
     278:	89 b9       	out	0x09, r24	; 9
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     27a:	82 b1       	in	r24, 0x02	; 2

    sense_trig_set_level(0);

    // read MCU ID + 1  (I2C Address 0 is reserved for general call)
    address =
        (!A4_get_level() << 4 | !A3_get_level() << 3 | !A2_get_level() << 2 | !A1_get_level() << 1 | !A0_get_level()) +
     27c:	08 2e       	mov	r0, r24
     27e:	00 0c       	add	r0, r0
     280:	99 0b       	sbc	r25, r25
     282:	80 95       	com	r24
     284:	90 95       	com	r25
     286:	29 2f       	mov	r18, r25
     288:	22 1f       	adc	r18, r18
     28a:	22 27       	eor	r18, r18
     28c:	22 1f       	adc	r18, r18
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	22 95       	swap	r18
     292:	32 95       	swap	r19
     294:	30 7f       	andi	r19, 0xF0	; 240
     296:	32 27       	eor	r19, r18
     298:	20 7f       	andi	r18, 0xF0	; 240
     29a:	32 27       	eor	r19, r18
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     29c:	96 b1       	in	r25, 0x06	; 6
     29e:	92 95       	swap	r25
     2a0:	96 95       	lsr	r25
     2a2:	97 70       	andi	r25, 0x07	; 7
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	98 27       	eor	r25, r24
     2a8:	90 fb       	bst	r25, 0
     2aa:	ee 24       	eor	r14, r14
     2ac:	e0 f8       	bld	r14, 0
     2ae:	f1 2c       	mov	r15, r1
     2b0:	ee 0c       	add	r14, r14
     2b2:	ff 1c       	adc	r15, r15
     2b4:	ee 0c       	add	r14, r14
     2b6:	ff 1c       	adc	r15, r15
     2b8:	ee 0c       	add	r14, r14
     2ba:	ff 1c       	adc	r15, r15
     2bc:	96 b1       	in	r25, 0x06	; 6
     2be:	92 95       	swap	r25
     2c0:	9f 70       	andi	r25, 0x0F	; 15
     2c2:	98 27       	eor	r25, r24
     2c4:	09 2f       	mov	r16, r25
     2c6:	01 70       	andi	r16, 0x01	; 1
     2c8:	10 e0       	ldi	r17, 0x00	; 0
     2ca:	00 0f       	add	r16, r16
     2cc:	11 1f       	adc	r17, r17
     2ce:	00 0f       	add	r16, r16
     2d0:	11 1f       	adc	r17, r17
     2d2:	96 b1       	in	r25, 0x06	; 6
     2d4:	96 95       	lsr	r25
     2d6:	96 95       	lsr	r25
     2d8:	96 95       	lsr	r25
     2da:	98 27       	eor	r25, r24
     2dc:	91 70       	andi	r25, 0x01	; 1
     2de:	c9 2f       	mov	r28, r25
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	d9 2f       	mov	r29, r25
     2e4:	cc 0f       	add	r28, r28
     2e6:	dd 1f       	adc	r29, r29
     2e8:	96 b1       	in	r25, 0x06	; 6
     2ea:	96 95       	lsr	r25
     2ec:	96 95       	lsr	r25
     2ee:	89 27       	eor	r24, r25
     2f0:	81 70       	andi	r24, 0x01	; 1
    cpu_irq_enable();

    sense_trig_set_level(0);

    // read MCU ID + 1  (I2C Address 0 is reserved for general call)
    address =
     2f2:	e2 2a       	or	r14, r18
     2f4:	0e 29       	or	r16, r14
     2f6:	c0 2b       	or	r28, r16
     2f8:	8c 2b       	or	r24, r28
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	80 93 43 3e 	sts	0x3E43, r24	; 0x803e43 <address>
        (!A4_get_level() << 4 | !A3_get_level() << 3 | !A2_get_level() << 2 | !A1_get_level() << 1 | !A0_get_level()) +
        1;

    // //// I2C ////
    // set Slabe Address
    TWI0.SADDR = address << TWI_ADDRMASK_gp /* Slave Address: 0x0 */
     300:	80 91 43 3e 	lds	r24, 0x3E43	; 0x803e43 <address>
     304:	88 0f       	add	r24, r24
     306:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <gain_setting_int_cap+0x7f6c7c>
                 | 0 << TWI_ADDREN_bp;      /* General Call Recognition Enable: disabled */

    // register Callback
    I2C_0_set_read_callback(I2C_0_read_handler);
     30a:	89 e9       	ldi	r24, 0x99	; 153
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	7f d2       	rcall	.+1278   	; 0x80e <I2C_0_set_read_callback>
    I2C_0_set_write_callback(I2C_0_write_handler);
     310:	82 ed       	ldi	r24, 0xD2	; 210
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	89 d2       	rcall	.+1298   	; 0x828 <I2C_0_set_write_callback>
    I2C_0_set_address_callback(I2C_0_address_handler);
     316:	87 e9       	ldi	r24, 0x97	; 151
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	93 d2       	rcall	.+1318   	; 0x842 <I2C_0_set_address_callback>
    I2C_0_set_stop_callback(I2C_0_stop_handler);
     31c:	8e e8       	ldi	r24, 0x8E	; 142
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	9d d2       	rcall	.+1338   	; 0x85c <I2C_0_set_stop_callback>
    I2C_0_set_collision_callback(I2C_0_error_handler);
     322:	81 e9       	ldi	r24, 0x91	; 145
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	a7 d2       	rcall	.+1358   	; 0x876 <I2C_0_set_collision_callback>
    I2C_0_set_bus_error_callback(I2C_0_error_handler);
     328:	81 e9       	ldi	r24, 0x91	; 145
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	15 d3       	rcall	.+1578   	; 0x958 <I2C_0_set_bus_error_callback>

    I2C_0_enable();
     32e:	55 d2       	rcall	.+1194   	; 0x7da <I2C_0_enable>
    I2C_0_open();
     330:	44 d2       	rcall	.+1160   	; 0x7ba <I2C_0_open>

    // Wait for start Command
    while (waitForController)
     332:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <waitForController>
     336:	81 11       	cpse	r24, r1
     338:	fc cf       	rjmp	.-8      	; 0x332 <main+0xc2>
     33a:	c0 e0       	ldi	r28, 0x00	; 0
     33c:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t irOffValue = 0;
    uint16_t irOnValue = 0;
    uint16_t irDifference = 0;

    while (1) {
        if (mode == RUNTOUCH) {
     33e:	80 91 3f 3e 	lds	r24, 0x3E3F	; 0x803e3f <mode>
     342:	82 30       	cpi	r24, 0x02	; 2
     344:	41 f5       	brne	.+80     	; 0x396 <main+0x126>
            //// Touch ////
            touch_process();
     346:	05 d1       	rcall	.+522    	; 0x552 <touch_process>

            // // check sensor state
            touchStatus = (get_sensor_state(0) & KEY_TOUCHED_MASK) >> 7 |
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	41 d1       	rcall	.+642    	; 0x5d0 <get_sensor_state>
     34e:	18 2f       	mov	r17, r24
     350:	11 1f       	adc	r17, r17
     352:	11 27       	eor	r17, r17
     354:	11 1f       	adc	r17, r17
                          (get_sensor_state(1) & KEY_TOUCHED_MASK) >> 6 | (get_sensor_state(2) & KEY_TOUCHED_MASK) >> 5;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	3a d1       	rcall	.+628    	; 0x5d0 <get_sensor_state>
     35c:	80 78       	andi	r24, 0x80	; 128
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	00 24       	eor	r0, r0
     362:	88 0f       	add	r24, r24
     364:	99 1f       	adc	r25, r25
     366:	00 1c       	adc	r0, r0
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	00 1c       	adc	r0, r0
     36e:	89 2f       	mov	r24, r25
     370:	90 2d       	mov	r25, r0
        if (mode == RUNTOUCH) {
            //// Touch ////
            touch_process();

            // // check sensor state
            touchStatus = (get_sensor_state(0) & KEY_TOUCHED_MASK) >> 7 |
     372:	d1 2f       	mov	r29, r17
     374:	d8 2b       	or	r29, r24
                          (get_sensor_state(1) & KEY_TOUCHED_MASK) >> 6 | (get_sensor_state(2) & KEY_TOUCHED_MASK) >> 5;
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	2a d1       	rcall	.+596    	; 0x5d0 <get_sensor_state>
     37c:	80 78       	andi	r24, 0x80	; 128
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	96 95       	lsr	r25
     382:	87 95       	ror	r24
     384:	92 95       	swap	r25
     386:	82 95       	swap	r24
     388:	8f 70       	andi	r24, 0x0F	; 15
     38a:	89 27       	eor	r24, r25
     38c:	9f 70       	andi	r25, 0x0F	; 15
     38e:	89 27       	eor	r24, r25
        if (mode == RUNTOUCH) {
            //// Touch ////
            touch_process();

            // // check sensor state
            touchStatus = (get_sensor_state(0) & KEY_TOUCHED_MASK) >> 7 |
     390:	1d 2f       	mov	r17, r29
     392:	18 2b       	or	r17, r24
     394:	68 c0       	rjmp	.+208    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
                          (get_sensor_state(1) & KEY_TOUCHED_MASK) >> 6 | (get_sensor_state(2) & KEY_TOUCHED_MASK) >> 5;
        }
        else if (mode == RUNIR) {
     396:	80 91 3f 3e 	lds	r24, 0x3E3F	; 0x803e3f <mode>
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	09 f0       	breq	.+2      	; 0x3a0 <main+0x130>
     39e:	63 c0       	rjmp	.+198    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     3a0:	39 c0       	rjmp	.+114    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
            irStatus = 0;

            // sample
            for (size_t i = 0; i < irSamples; i++) {
                // sense OFF Value
                irOffValue = ADC_0_get_conversion(ADC_MUXPOS_AIN10_gc);
     3a2:	8a e0       	ldi	r24, 0x0A	; 10
     3a4:	b0 de       	rcall	.-672    	; 0x106 <ADC_0_get_conversion>
     3a6:	7c 01       	movw	r14, r24
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     3a8:	85 b1       	in	r24, 0x05	; 5
     3aa:	81 60       	ori	r24, 0x01	; 1
     3ac:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ae:	e7 e8       	ldi	r30, 0x87	; 135
     3b0:	f3 e1       	ldi	r31, 0x13	; 19
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <main+0x142>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <main+0x148>
     3b8:	00 00       	nop

                IR_LED_set_level(1);
                // // sense ON Value
                _delay_us(1000); // wait a moment for IR LED and receiver

                irOnValue = ADC_0_get_conversion(ADC_MUXPOS_AIN10_gc);
     3ba:	8a e0       	ldi	r24, 0x0A	; 10
     3bc:	a4 de       	rcall	.-696    	; 0x106 <ADC_0_get_conversion>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     3be:	25 b1       	in	r18, 0x05	; 5
     3c0:	2e 7f       	andi	r18, 0xFE	; 254
     3c2:	25 b9       	out	0x05, r18	; 5
     3c4:	e7 e8       	ldi	r30, 0x87	; 135
     3c6:	f3 e1       	ldi	r31, 0x13	; 19
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <main+0x158>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x15e>
     3ce:	00 00       	nop

                IR_LED_set_level(0);
                _delay_us(1000); // wait a moment for IR LED and receiver

                // check difference above treshold
                irDifference = abs((int16_t)irOnValue - (int16_t)irOffValue);
     3d0:	8e 19       	sub	r24, r14
     3d2:	9f 09       	sbc	r25, r15
     3d4:	9c 01       	movw	r18, r24
     3d6:	22 f4       	brpl	.+8      	; 0x3e0 <main+0x170>
     3d8:	22 27       	eor	r18, r18
     3da:	33 27       	eor	r19, r19
     3dc:	28 1b       	sub	r18, r24
     3de:	39 0b       	sbc	r19, r25

                if (irDifference >= irThreshold) {
     3e0:	80 91 14 3e 	lds	r24, 0x3E14	; 0x803e14 <irThreshold>
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	28 17       	cp	r18, r24
     3e8:	39 07       	cpc	r19, r25
     3ea:	08 f0       	brcs	.+2      	; 0x3ee <main+0x17e>
                    irCounter = irCounter + 1;
     3ec:	0f 5f       	subi	r16, 0xFF	; 255
                }

                for (size_t i = 0; i < irDelay;
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	08 c0       	rjmp	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f4:	87 e8       	ldi	r24, 0x87	; 135
     3f6:	93 e1       	ldi	r25, 0x13	; 19
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <main+0x188>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x18e>
     3fe:	00 00       	nop
                     i++) // looks weird but is needed because the delay needs a compile time constant
     400:	2f 5f       	subi	r18, 0xFF	; 255
     402:	3f 4f       	sbci	r19, 0xFF	; 255

                if (irDifference >= irThreshold) {
                    irCounter = irCounter + 1;
                }

                for (size_t i = 0; i < irDelay;
     404:	80 91 47 3e 	lds	r24, 0x3E47	; 0x803e47 <irDelay>
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	28 17       	cp	r18, r24
     40c:	39 07       	cpc	r19, r25
     40e:	90 f3       	brcs	.-28     	; 0x3f4 <main+0x184>
            // reset Status
            irCounter = 0;
            irStatus = 0;

            // sample
            for (size_t i = 0; i < irSamples; i++) {
     410:	21 96       	adiw	r28, 0x01	; 1
     412:	03 c0       	rjmp	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     414:	c0 e0       	ldi	r28, 0x00	; 0
     416:	d0 e0       	ldi	r29, 0x00	; 0
     418:	00 e0       	ldi	r16, 0x00	; 0
     41a:	80 91 13 3e 	lds	r24, 0x3E13	; 0x803e13 <irSamples>
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	c8 17       	cp	r28, r24
     422:	d9 07       	cpc	r29, r25
     424:	08 f4       	brcc	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	bd cf       	rjmp	.-134    	; 0x3a2 <main+0x132>
                {
                    _delay_ms(1); // wait for 1 ms per loop
                }
            }
            // get ir status (average)
            if ((float)(irCounter /= (float)irSamples) >= 0.5) {
     428:	60 91 13 3e 	lds	r22, 0x3E13	; 0x803e13 <irSamples>
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	fd da       	rcall	.-2566   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>
     434:	6b 01       	movw	r12, r22
     436:	7c 01       	movw	r14, r24
     438:	60 2f       	mov	r22, r16
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	f8 da       	rcall	.-2576   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
     442:	a7 01       	movw	r20, r14
     444:	96 01       	movw	r18, r12
     446:	52 da       	rcall	.-2908   	; 0xfffff8ec <__eeprom_end+0xff7ef8ec>
     448:	c3 da       	rcall	.-2682   	; 0xfffff9d0 <__eeprom_end+0xff7ef9d0>
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	ee da       	rcall	.-2596   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	5f e3       	ldi	r21, 0x3F	; 63
     45a:	77 db       	rcall	.-2322   	; 0xfffffb4a <__eeprom_end+0xff7efb4a>
     45c:	88 23       	and	r24, r24
     45e:	14 f4       	brge	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
        else if (mode == RUNIR) {
            //// Infrared ////

            // reset Status
            irCounter = 0;
            irStatus = 0;
     460:	c0 e0       	ldi	r28, 0x00	; 0
     462:	01 c0       	rjmp	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
                    _delay_ms(1); // wait for 1 ms per loop
                }
            }
            // get ir status (average)
            if ((float)(irCounter /= (float)irSamples) >= 0.5) {
                irStatus = 1;
     464:	c1 e0       	ldi	r28, 0x01	; 1
            }
        }

        //  check state change and call controller
        if (senseState != (touchStatus | irStatus)) {
     466:	81 2f       	mov	r24, r17
     468:	8c 2b       	or	r24, r28
     46a:	90 91 42 3e 	lds	r25, 0x3E42	; 0x803e42 <senseState>
     46e:	89 17       	cp	r24, r25
     470:	09 f4       	brne	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     472:	65 cf       	rjmp	.-310    	; 0x33e <main+0xce>
            senseState = touchStatus | irStatus;
     474:	80 93 42 3e 	sts	0x3E42, r24	; 0x803e42 <senseState>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     478:	89 b1       	in	r24, 0x09	; 9
     47a:	88 60       	ori	r24, 0x08	; 8
     47c:	89 b9       	out	0x09, r24	; 9
            sense_trig_set_level(1);
            waitForSenseRead = true;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	80 93 3e 3e 	sts	0x3E3E, r24	; 0x803e3e <__data_end>
            while (waitForSenseRead == true) // wait for control read
     484:	80 91 3e 3e 	lds	r24, 0x3E3E	; 0x803e3e <__data_end>
     488:	81 11       	cpse	r24, r1
     48a:	fc cf       	rjmp	.-8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     48c:	58 cf       	rjmp	.-336    	; 0x33e <main+0xce>

0000048e <touch_ptc_pin_config>:
uint8_t get_sensor_state(uint16_t sensor_node) {
    return (qtlib_key_set1.qtm_touch_key_data[sensor_node].sensor_state);
}

void update_sensor_state(uint16_t sensor_node, uint8_t new_state) {
    qtlib_key_set1.qtm_touch_key_data[sensor_node].sensor_state = new_state;
     48e:	e4 e1       	ldi	r30, 0x14	; 20
     490:	f4 e0       	ldi	r31, 0x04	; 4
     492:	80 81       	ld	r24, Z
     494:	87 7f       	andi	r24, 0xF7	; 247
     496:	80 83       	st	Z, r24
     498:	80 81       	ld	r24, Z
     49a:	88 7f       	andi	r24, 0xF8	; 248
     49c:	84 60       	ori	r24, 0x04	; 4
     49e:	80 83       	st	Z, r24
     4a0:	e5 e1       	ldi	r30, 0x15	; 21
     4a2:	f4 e0       	ldi	r31, 0x04	; 4
     4a4:	80 81       	ld	r24, Z
     4a6:	87 7f       	andi	r24, 0xF7	; 247
     4a8:	80 83       	st	Z, r24
     4aa:	80 81       	ld	r24, Z
     4ac:	88 7f       	andi	r24, 0xF8	; 248
     4ae:	84 60       	ori	r24, 0x04	; 4
     4b0:	80 83       	st	Z, r24
     4b2:	e6 e1       	ldi	r30, 0x16	; 22
     4b4:	f4 e0       	ldi	r31, 0x04	; 4
     4b6:	80 81       	ld	r24, Z
     4b8:	87 7f       	andi	r24, 0xF7	; 247
     4ba:	80 83       	st	Z, r24
     4bc:	80 81       	ld	r24, Z
     4be:	88 7f       	andi	r24, 0xF8	; 248
     4c0:	84 60       	ori	r24, 0x04	; 4
     4c2:	80 83       	st	Z, r24
     4c4:	08 95       	ret

000004c6 <qtm_measure_complete_callback>:
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 4a 3e 	sts	0x3E4A, r24	; 0x803e4a <touch_postprocess_request>
     4cc:	08 95       	ret

000004ce <qtm_error_callback>:
     4ce:	8f 5f       	subi	r24, 0xFF	; 255
     4d0:	80 93 48 3e 	sts	0x3E48, r24	; 0x803e48 <module_error_code>
     4d4:	08 95       	ret

000004d6 <touch_sensors_config>:
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	80 e3       	ldi	r24, 0x30	; 48
     4dc:	9e e3       	ldi	r25, 0x3E	; 62
     4de:	d6 d8       	rcall	.-3668   	; 0xfffff68c <__eeprom_end+0xff7ef68c>
     4e0:	89 e6       	ldi	r24, 0x69	; 105
     4e2:	9e e3       	ldi	r25, 0x3E	; 62
     4e4:	0b d9       	rcall	.-3562   	; 0xfffff6fc <__eeprom_end+0xff7ef6fc>
     4e6:	c0 e0       	ldi	r28, 0x00	; 0
     4e8:	d0 e0       	ldi	r29, 0x00	; 0
     4ea:	09 c0       	rjmp	.+18     	; 0x4fe <touch_sensors_config+0x28>
     4ec:	be 01       	movw	r22, r28
     4ee:	80 e3       	ldi	r24, 0x30	; 48
     4f0:	9e e3       	ldi	r25, 0x3E	; 62
     4f2:	72 d9       	rcall	.-3356   	; 0xfffff7d8 <__eeprom_end+0xff7ef7d8>
     4f4:	be 01       	movw	r22, r28
     4f6:	80 e3       	ldi	r24, 0x30	; 48
     4f8:	9e e3       	ldi	r25, 0x3E	; 62
     4fa:	8d d9       	rcall	.-3302   	; 0xfffff816 <__eeprom_end+0xff7ef816>
     4fc:	21 96       	adiw	r28, 0x01	; 1
     4fe:	c3 30       	cpi	r28, 0x03	; 3
     500:	d1 05       	cpc	r29, r1
     502:	a0 f3       	brcs	.-24     	; 0x4ec <touch_sensors_config+0x16>
     504:	c0 e0       	ldi	r28, 0x00	; 0
     506:	d0 e0       	ldi	r29, 0x00	; 0
     508:	0e c0       	rjmp	.+28     	; 0x526 <touch_sensors_config+0x50>
     50a:	ae 01       	movw	r20, r28
     50c:	44 0f       	add	r20, r20
     50e:	55 1f       	adc	r21, r21
     510:	44 0f       	add	r20, r20
     512:	55 1f       	adc	r21, r21
     514:	4c 0f       	add	r20, r28
     516:	5d 1f       	adc	r21, r29
     518:	46 5a       	subi	r20, 0xA6	; 166
     51a:	51 4c       	sbci	r21, 0xC1	; 193
     51c:	6c 2f       	mov	r22, r28
     51e:	85 e1       	ldi	r24, 0x15	; 21
     520:	9e e3       	ldi	r25, 0x3E	; 62
     522:	bb d2       	rcall	.+1398   	; 0xa9a <qtm_init_sensor_key>
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	c3 30       	cpi	r28, 0x03	; 3
     528:	d1 05       	cpc	r29, r1
     52a:	78 f3       	brcs	.-34     	; 0x50a <touch_sensors_config+0x34>
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <Timer_set_period>:
     534:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <gain_setting_int_cap+0x7f65a1>
     538:	92 fd       	sbrc	r25, 2
     53a:	fc cf       	rjmp	.-8      	; 0x534 <Timer_set_period>
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <gain_setting_int_cap+0x7f65aa>
     542:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <gain_setting_int_cap+0x7f65ab>
     546:	08 95       	ret

00000548 <touch_init>:
     548:	80 e2       	ldi	r24, 0x20	; 32
     54a:	f4 df       	rcall	.-24     	; 0x534 <Timer_set_period>
     54c:	a0 df       	rcall	.-192    	; 0x48e <touch_ptc_pin_config>
     54e:	c3 df       	rcall	.-122    	; 0x4d6 <touch_sensors_config>
     550:	08 95       	ret

00000552 <touch_process>:
     552:	80 91 4b 3e 	lds	r24, 0x3E4B	; 0x803e4b <time_to_measure_touch_flag>
     556:	81 30       	cpi	r24, 0x01	; 1
     558:	49 f4       	brne	.+18     	; 0x56c <touch_process+0x1a>
     55a:	63 e6       	ldi	r22, 0x63	; 99
     55c:	72 e0       	ldi	r23, 0x02	; 2
     55e:	80 e3       	ldi	r24, 0x30	; 48
     560:	9e e3       	ldi	r25, 0x3E	; 62
     562:	d6 d8       	rcall	.-3668   	; 0xfffff710 <__eeprom_end+0xff7ef710>
     564:	81 11       	cpse	r24, r1
     566:	02 c0       	rjmp	.+4      	; 0x56c <touch_process+0x1a>
     568:	10 92 4b 3e 	sts	0x3E4B, r1	; 0x803e4b <time_to_measure_touch_flag>
     56c:	80 91 4a 3e 	lds	r24, 0x3E4A	; 0x803e4a <touch_postprocess_request>
     570:	81 30       	cpi	r24, 0x01	; 1
     572:	e9 f4       	brne	.+58     	; 0x5ae <touch_process+0x5c>
     574:	10 92 4a 3e 	sts	0x3E4A, r1	; 0x803e4a <touch_postprocess_request>
     578:	0b d7       	rcall	.+3606   	; 0x1390 <qtm_acquisition_process>
     57a:	81 11       	cpse	r24, r1
     57c:	08 c0       	rjmp	.+16     	; 0x58e <touch_process+0x3c>
     57e:	85 e1       	ldi	r24, 0x15	; 21
     580:	9e e3       	ldi	r25, 0x3E	; 62
     582:	aa d2       	rcall	.+1364   	; 0xad8 <qtm_key_sensors_process>
     584:	88 23       	and	r24, r24
     586:	29 f0       	breq	.+10     	; 0x592 <touch_process+0x40>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	a1 df       	rcall	.-190    	; 0x4ce <qtm_error_callback>
     58c:	02 c0       	rjmp	.+4      	; 0x592 <touch_process+0x40>
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	9e df       	rcall	.-196    	; 0x4ce <qtm_error_callback>
     592:	e0 91 15 3e 	lds	r30, 0x3E15	; 0x803e15 <qtlib_key_set1>
     596:	f0 91 16 3e 	lds	r31, 0x3E16	; 0x803e16 <qtlib_key_set1+0x1>
     59a:	80 81       	ld	r24, Z
     59c:	88 23       	and	r24, r24
     59e:	24 f4       	brge	.+8      	; 0x5a8 <touch_process+0x56>
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	80 93 4b 3e 	sts	0x3E4B, r24	; 0x803e4b <time_to_measure_touch_flag>
     5a6:	08 95       	ret
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 49 3e 	sts	0x3E49, r24	; 0x803e49 <measurement_done_touch>
     5ae:	08 95       	ret

000005b0 <touch_timer_handler>:
     5b0:	80 91 59 3e 	lds	r24, 0x3E59	; 0x803e59 <interrupt_cnt>
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	80 93 59 3e 	sts	0x3E59, r24	; 0x803e59 <interrupt_cnt>
     5ba:	84 31       	cpi	r24, 0x14	; 20
     5bc:	40 f0       	brcs	.+16     	; 0x5ce <touch_timer_handler+0x1e>
     5be:	10 92 59 3e 	sts	0x3E59, r1	; 0x803e59 <interrupt_cnt>
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 4b 3e 	sts	0x3E4B, r24	; 0x803e4b <time_to_measure_touch_flag>
     5c8:	84 e1       	ldi	r24, 0x14	; 20
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	5b d2       	rcall	.+1206   	; 0xa84 <qtm_update_qtlib_timer>
     5ce:	08 95       	ret

000005d0 <get_sensor_state>:
     5d0:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <qtlib_key_set1+0x4>
     5d4:	f0 91 1a 3e 	lds	r31, 0x3E1A	; 0x803e1a <qtlib_key_set1+0x5>
     5d8:	9c 01       	movw	r18, r24
     5da:	22 0f       	add	r18, r18
     5dc:	33 1f       	adc	r19, r19
     5de:	82 0f       	add	r24, r18
     5e0:	93 1f       	adc	r25, r19
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	e8 0f       	add	r30, r24
     5e8:	f9 1f       	adc	r31, r25
     5ea:	80 81       	ld	r24, Z
     5ec:	08 95       	ret

000005ee <calibrate_node>:
}

void calibrate_node(uint16_t sensor_node) {
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	ec 01       	movw	r28, r24
    /* Calibrate Node */
    qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
     5f4:	bc 01       	movw	r22, r24
     5f6:	80 e3       	ldi	r24, 0x30	; 48
     5f8:	9e e3       	ldi	r25, 0x3E	; 62
     5fa:	0d d9       	rcall	.-3558   	; 0xfffff816 <__eeprom_end+0xff7ef816>
    /* Initialize key */
    qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
     5fc:	ae 01       	movw	r20, r28
     5fe:	44 0f       	add	r20, r20
     600:	55 1f       	adc	r21, r21
     602:	44 0f       	add	r20, r20
     604:	55 1f       	adc	r21, r21
     606:	4c 0f       	add	r20, r28
     608:	5d 1f       	adc	r21, r29
     60a:	46 5a       	subi	r20, 0xA6	; 166
     60c:	51 4c       	sbci	r21, 0xC1	; 193
     60e:	6c 2f       	mov	r22, r28
     610:	85 e1       	ldi	r24, 0x15	; 21
     612:	9e e3       	ldi	r25, 0x3E	; 62
     614:	42 d2       	rcall	.+1156   	; 0xa9a <qtm_init_sensor_key>
}
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <__vector_17>:
Purpose:  Interrupt handler for ADC / PTC EOC Interrupt
Input    :  none
Output  :  none
Notes    :  none
============================================================================*/
ISR(ADC0_RESRDY_vect) {
     61c:	1f 92       	push	r1
     61e:	0f 92       	push	r0
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	0f 92       	push	r0
     624:	11 24       	eor	r1, r1
     626:	2f 93       	push	r18
     628:	3f 93       	push	r19
     62a:	4f 93       	push	r20
     62c:	5f 93       	push	r21
     62e:	6f 93       	push	r22
     630:	7f 93       	push	r23
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	ef 93       	push	r30
     63c:	ff 93       	push	r31
    qtm_t81x_ptc_handler_eoc();
     63e:	2c d9       	rcall	.-3496   	; 0xfffff898 <__eeprom_end+0xff7ef898>
}
     640:	ff 91       	pop	r31
     642:	ef 91       	pop	r30
     644:	bf 91       	pop	r27
     646:	af 91       	pop	r26
     648:	9f 91       	pop	r25
     64a:	8f 91       	pop	r24
     64c:	7f 91       	pop	r23
     64e:	6f 91       	pop	r22
     650:	5f 91       	pop	r21
     652:	4f 91       	pop	r20
     654:	3f 91       	pop	r19
     656:	2f 91       	pop	r18
     658:	0f 90       	pop	r0
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	0f 90       	pop	r0
     65e:	1f 90       	pop	r1
     660:	18 95       	reti

00000662 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	08 95       	ret

00000666 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	68 ed       	ldi	r22, 0xD8	; 216
     66a:	81 e6       	ldi	r24, 0x61	; 97
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	8f d1       	rcall	.+798    	; 0x98e <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	08 95       	ret

00000674 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     674:	78 94       	sei

	return 0;
}
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	08 95       	ret

0000067a <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	08 c0       	rjmp	.+16     	; 0x68e <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     67e:	e8 2f       	mov	r30, r24
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	e0 5f       	subi	r30, 0xF0	; 240
     684:	fb 4f       	sbci	r31, 0xFB	; 251
     686:	90 81       	ld	r25, Z
     688:	98 60       	ori	r25, 0x08	; 8
     68a:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     68c:	8f 5f       	subi	r24, 0xFF	; 255
     68e:	88 30       	cpi	r24, 0x08	; 8
     690:	b0 f3       	brcs	.-20     	; 0x67e <mcu_init+0x4>
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	08 c0       	rjmp	.+16     	; 0x6a6 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     696:	e8 2f       	mov	r30, r24
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	e0 5d       	subi	r30, 0xD0	; 208
     69c:	fb 4f       	sbci	r31, 0xFB	; 251
     69e:	90 81       	ld	r25, Z
     6a0:	98 60       	ori	r25, 0x08	; 8
     6a2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     6a4:	8f 5f       	subi	r24, 0xFF	; 255
     6a6:	88 30       	cpi	r24, 0x08	; 8
     6a8:	b0 f3       	brcs	.-20     	; 0x696 <mcu_init+0x1c>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	08 c0       	rjmp	.+16     	; 0x6be <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     6ae:	e8 2f       	mov	r30, r24
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	e0 5b       	subi	r30, 0xB0	; 176
     6b4:	fb 4f       	sbci	r31, 0xFB	; 251
     6b6:	90 81       	ld	r25, Z
     6b8:	98 60       	ori	r25, 0x08	; 8
     6ba:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	88 30       	cpi	r24, 0x08	; 8
     6c0:	b0 f3       	brcs	.-20     	; 0x6ae <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     6c2:	08 95       	ret

000006c4 <ADC_0_initialization>:
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     6c4:	e1 e3       	ldi	r30, 0x31	; 49
     6c6:	f4 e0       	ldi	r31, 0x04	; 4
     6c8:	80 81       	ld	r24, Z
     6ca:	88 7f       	andi	r24, 0xF8	; 248
     6cc:	84 60       	ori	r24, 0x04	; 4
     6ce:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     6d0:	80 81       	ld	r24, Z
     6d2:	87 7f       	andi	r24, 0xF7	; 247
     6d4:	80 83       	st	Z, r24
    // Disable digital input buffer
    IR_SENSE_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    // Disable pull-up resistor
    IR_SENSE_set_pull_mode(PORT_PULL_OFF);

    ADC_0_init();
     6d6:	f2 dc       	rcall	.-1564   	; 0xbc <ADC_0_init>
     6d8:	08 95       	ret

000006da <I2C_0_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     6da:	81 b1       	in	r24, 0x01	; 1
     6dc:	8b 7f       	andi	r24, 0xFB	; 251
     6de:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     6e0:	80 b1       	in	r24, 0x00	; 0
     6e2:	84 60       	ori	r24, 0x04	; 4
     6e4:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     6e6:	e2 e1       	ldi	r30, 0x12	; 18
     6e8:	f4 e0       	ldi	r31, 0x04	; 4
     6ea:	80 81       	ld	r24, Z
     6ec:	87 7f       	andi	r24, 0xF7	; 247
     6ee:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     6f0:	80 81       	ld	r24, Z
     6f2:	8f 77       	andi	r24, 0x7F	; 127
     6f4:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     6f6:	80 81       	ld	r24, Z
     6f8:	88 7f       	andi	r24, 0xF8	; 248
     6fa:	80 83       	st	Z, r24
        // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
        // <PORT_ISC_LEVEL_gc"> Sense low Level
        PORT_ISC_INTDISABLE_gc);

    /* set the alternate pin mux */
    PORTMUX.CTRLB |= PORTMUX_TWI0_bm;
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b2 e0       	ldi	r27, 0x02	; 2
     700:	11 96       	adiw	r26, 0x01	; 1
     702:	8c 91       	ld	r24, X
     704:	11 97       	sbiw	r26, 0x01	; 1
     706:	80 61       	ori	r24, 0x10	; 16
     708:	11 96       	adiw	r26, 0x01	; 1
     70a:	8c 93       	st	X, r24
     70c:	11 97       	sbiw	r26, 0x01	; 1
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     70e:	81 b1       	in	r24, 0x01	; 1
     710:	8d 7f       	andi	r24, 0xFD	; 253
     712:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     714:	80 b1       	in	r24, 0x00	; 0
     716:	82 60       	ori	r24, 0x02	; 2
     718:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     71a:	e1 e1       	ldi	r30, 0x11	; 17
     71c:	f4 e0       	ldi	r31, 0x04	; 4
     71e:	80 81       	ld	r24, Z
     720:	87 7f       	andi	r24, 0xF7	; 247
     722:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     724:	80 81       	ld	r24, Z
     726:	8f 77       	andi	r24, 0x7F	; 127
     728:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     72a:	80 81       	ld	r24, Z
     72c:	88 7f       	andi	r24, 0xF8	; 248
     72e:	80 83       	st	Z, r24
        // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
        // <PORT_ISC_LEVEL_gc"> Sense low Level
        PORT_ISC_INTDISABLE_gc);

    /* set the alternate pin mux */
    PORTMUX.CTRLB |= PORTMUX_TWI0_bm;
     730:	11 96       	adiw	r26, 0x01	; 1
     732:	8c 91       	ld	r24, X
     734:	11 97       	sbiw	r26, 0x01	; 1
     736:	80 61       	ori	r24, 0x10	; 16
     738:	11 96       	adiw	r26, 0x01	; 1
     73a:	8c 93       	st	X, r24

    I2C_0_init();
     73c:	12 d1       	rcall	.+548    	; 0x962 <I2C_0_init>
     73e:	08 95       	ret

00000740 <system_init>:

/**
 * \brief System initialization
 */
void system_init() {
    mcu_init();
     740:	9c df       	rcall	.-200    	; 0x67a <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     742:	80 b1       	in	r24, 0x00	; 0
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     748:	e7 e1       	ldi	r30, 0x17	; 23
     74a:	f4 e0       	ldi	r31, 0x04	; 4
     74c:	80 81       	ld	r24, Z
     74e:	88 60       	ori	r24, 0x08	; 8
     750:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     752:	85 b1       	in	r24, 0x05	; 5
     754:	8e 7f       	andi	r24, 0xFE	; 254
     756:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     758:	84 b1       	in	r24, 0x04	; 4
     75a:	81 60       	ori	r24, 0x01	; 1
     75c:	84 b9       	out	0x04, r24	; 4
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     75e:	84 b1       	in	r24, 0x04	; 4
     760:	8b 7f       	andi	r24, 0xFB	; 251
     762:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     764:	e2 e3       	ldi	r30, 0x32	; 50
     766:	f4 e0       	ldi	r31, 0x04	; 4
     768:	80 81       	ld	r24, Z
     76a:	88 60       	ori	r24, 0x08	; 8
     76c:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     76e:	84 b1       	in	r24, 0x04	; 4
     770:	87 7f       	andi	r24, 0xF7	; 247
     772:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     774:	e3 e3       	ldi	r30, 0x33	; 51
     776:	f4 e0       	ldi	r31, 0x04	; 4
     778:	80 81       	ld	r24, Z
     77a:	88 60       	ori	r24, 0x08	; 8
     77c:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     77e:	84 b1       	in	r24, 0x04	; 4
     780:	8f 7e       	andi	r24, 0xEF	; 239
     782:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     784:	e4 e3       	ldi	r30, 0x34	; 52
     786:	f4 e0       	ldi	r31, 0x04	; 4
     788:	80 81       	ld	r24, Z
     78a:	88 60       	ori	r24, 0x08	; 8
     78c:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     78e:	84 b1       	in	r24, 0x04	; 4
     790:	8f 7d       	andi	r24, 0xDF	; 223
     792:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     794:	e5 e3       	ldi	r30, 0x35	; 53
     796:	f4 e0       	ldi	r31, 0x04	; 4
     798:	80 81       	ld	r24, Z
     79a:	88 60       	ori	r24, 0x08	; 8
     79c:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     79e:	89 b1       	in	r24, 0x09	; 9
     7a0:	87 7f       	andi	r24, 0xF7	; 247
     7a2:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     7a4:	88 b1       	in	r24, 0x08	; 8
     7a6:	88 60       	ori	r24, 0x08	; 8
     7a8:	88 b9       	out	0x08, r24	; 8
        // <true"> High
        false);

    sense_trig_set_dir(PORT_DIR_OUT);

    CLKCTRL_init();
     7aa:	5d df       	rcall	.-326    	; 0x666 <CLKCTRL_init>

    Timer_init();
     7ac:	f4 d0       	rcall	.+488    	; 0x996 <Timer_init>

    ADC_0_initialization();
     7ae:	8a df       	rcall	.-236    	; 0x6c4 <ADC_0_initialization>

    CPUINT_init();
     7b0:	61 df       	rcall	.-318    	; 0x674 <CPUINT_init>

    SLPCTRL_init();
     7b2:	fd d0       	rcall	.+506    	; 0x9ae <SLPCTRL_init>

    I2C_0_initialization();
     7b4:	92 df       	rcall	.-220    	; 0x6da <I2C_0_initialization>

    BOD_init();
     7b6:	55 df       	rcall	.-342    	; 0x662 <BOD_init>
     7b8:	08 95       	ret

000007ba <I2C_0_open>:
 *
 * \return Nothing
 */
void I2C_0_send_nack(void)
{
	TWI0.SCTRLB = TWI_ACKACT_NACK_gc | TWI_SCMD_COMPTRANS_gc;
     7ba:	e0 e1       	ldi	r30, 0x10	; 16
     7bc:	f8 e0       	ldi	r31, 0x08	; 8
     7be:	81 85       	ldd	r24, Z+9	; 0x09
     7c0:	81 60       	ori	r24, 0x01	; 1
     7c2:	81 87       	std	Z+9, r24	; 0x09
     7c4:	08 95       	ret

000007c6 <I2C_0_read>:
     7c6:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <gain_setting_int_cap+0x7f6c7d>
     7ca:	08 95       	ret

000007cc <I2C_0_write>:
     7cc:	e0 e1       	ldi	r30, 0x10	; 16
     7ce:	f8 e0       	ldi	r31, 0x08	; 8
     7d0:	85 87       	std	Z+13, r24	; 0x0d
     7d2:	82 85       	ldd	r24, Z+10	; 0x0a
     7d4:	83 60       	ori	r24, 0x03	; 3
     7d6:	82 87       	std	Z+10, r24	; 0x0a
     7d8:	08 95       	ret

000007da <I2C_0_enable>:
     7da:	e0 e1       	ldi	r30, 0x10	; 16
     7dc:	f8 e0       	ldi	r31, 0x08	; 8
     7de:	81 85       	ldd	r24, Z+9	; 0x09
     7e0:	81 60       	ori	r24, 0x01	; 1
     7e2:	81 87       	std	Z+9, r24	; 0x09
     7e4:	08 95       	ret

000007e6 <I2C_0_send_ack>:
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <gain_setting_int_cap+0x7f6c7a>
     7ec:	08 95       	ret

000007ee <I2C_0_goto_unaddressed>:
 * \return Nothing
 */
void I2C_0_goto_unaddressed(void)
{
	// Reset module
	TWI0.SSTATUS |= (TWI_DIF_bm | TWI_APIF_bm);
     7ee:	e0 e1       	ldi	r30, 0x10	; 16
     7f0:	f8 e0       	ldi	r31, 0x08	; 8
     7f2:	83 85       	ldd	r24, Z+11	; 0x0b
     7f4:	80 6c       	ori	r24, 0xC0	; 192
     7f6:	83 87       	std	Z+11, r24	; 0x0b
	TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	82 87       	std	Z+10, r24	; 0x0a
     7fc:	08 95       	ret

000007fe <I2C_0_read_callback>:
}

// Read Event Interrupt Handlers
void I2C_0_read_callback(void)
{
	if (I2C_0_read_interrupt_handler) {
     7fe:	e0 91 85 3e 	lds	r30, 0x3E85	; 0x803e85 <I2C_0_read_interrupt_handler>
     802:	f0 91 86 3e 	lds	r31, 0x3E86	; 0x803e86 <I2C_0_read_interrupt_handler+0x1>
     806:	30 97       	sbiw	r30, 0x00	; 0
     808:	09 f0       	breq	.+2      	; 0x80c <I2C_0_read_callback+0xe>
		I2C_0_read_interrupt_handler();
     80a:	09 95       	icall
     80c:	08 95       	ret

0000080e <I2C_0_set_read_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_read_callback(I2C_0_callback handler)
{
	I2C_0_read_interrupt_handler = handler;
     80e:	80 93 85 3e 	sts	0x3E85, r24	; 0x803e85 <I2C_0_read_interrupt_handler>
     812:	90 93 86 3e 	sts	0x3E86, r25	; 0x803e86 <I2C_0_read_interrupt_handler+0x1>
     816:	08 95       	ret

00000818 <I2C_0_write_callback>:
}

// Write Event Interrupt Handlers
void I2C_0_write_callback(void)
{
	if (I2C_0_write_interrupt_handler) {
     818:	e0 91 83 3e 	lds	r30, 0x3E83	; 0x803e83 <I2C_0_write_interrupt_handler>
     81c:	f0 91 84 3e 	lds	r31, 0x3E84	; 0x803e84 <I2C_0_write_interrupt_handler+0x1>
     820:	30 97       	sbiw	r30, 0x00	; 0
     822:	09 f0       	breq	.+2      	; 0x826 <I2C_0_write_callback+0xe>
		I2C_0_write_interrupt_handler();
     824:	09 95       	icall
     826:	08 95       	ret

00000828 <I2C_0_set_write_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_write_callback(I2C_0_callback handler)
{
	I2C_0_write_interrupt_handler = handler;
     828:	80 93 83 3e 	sts	0x3E83, r24	; 0x803e83 <I2C_0_write_interrupt_handler>
     82c:	90 93 84 3e 	sts	0x3E84, r25	; 0x803e84 <I2C_0_write_interrupt_handler+0x1>
     830:	08 95       	ret

00000832 <I2C_0_address_callback>:
}

// Address Event Interrupt Handlers
void I2C_0_address_callback(void)
{
	if (I2C_0_address_interrupt_handler) {
     832:	e0 91 87 3e 	lds	r30, 0x3E87	; 0x803e87 <I2C_0_address_interrupt_handler>
     836:	f0 91 88 3e 	lds	r31, 0x3E88	; 0x803e88 <I2C_0_address_interrupt_handler+0x1>
     83a:	30 97       	sbiw	r30, 0x00	; 0
     83c:	09 f0       	breq	.+2      	; 0x840 <I2C_0_address_callback+0xe>
		I2C_0_address_interrupt_handler();
     83e:	09 95       	icall
     840:	08 95       	ret

00000842 <I2C_0_set_address_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_address_callback(I2C_0_callback handler)
{
	I2C_0_address_interrupt_handler = handler;
     842:	80 93 87 3e 	sts	0x3E87, r24	; 0x803e87 <I2C_0_address_interrupt_handler>
     846:	90 93 88 3e 	sts	0x3E88, r25	; 0x803e88 <I2C_0_address_interrupt_handler+0x1>
     84a:	08 95       	ret

0000084c <I2C_0_stop_callback>:
}

// Stop Event Interrupt Handlers
void I2C_0_stop_callback(void)
{
	if (I2C_0_stop_interrupt_handler) {
     84c:	e0 91 81 3e 	lds	r30, 0x3E81	; 0x803e81 <I2C_0_stop_interrupt_handler>
     850:	f0 91 82 3e 	lds	r31, 0x3E82	; 0x803e82 <I2C_0_stop_interrupt_handler+0x1>
     854:	30 97       	sbiw	r30, 0x00	; 0
     856:	09 f0       	breq	.+2      	; 0x85a <I2C_0_stop_callback+0xe>
		I2C_0_stop_interrupt_handler();
     858:	09 95       	icall
     85a:	08 95       	ret

0000085c <I2C_0_set_stop_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_stop_callback(I2C_0_callback handler)
{
	I2C_0_stop_interrupt_handler = handler;
     85c:	80 93 81 3e 	sts	0x3E81, r24	; 0x803e81 <I2C_0_stop_interrupt_handler>
     860:	90 93 82 3e 	sts	0x3E82, r25	; 0x803e82 <I2C_0_stop_interrupt_handler+0x1>
     864:	08 95       	ret

00000866 <I2C_0_collision_callback>:
}

// Bus Collision Event Interrupt Handlers
void I2C_0_collision_callback(void)
{
	if (I2C_0_collision_interrupt_handler) {
     866:	e0 91 8b 3e 	lds	r30, 0x3E8B	; 0x803e8b <I2C_0_collision_interrupt_handler>
     86a:	f0 91 8c 3e 	lds	r31, 0x3E8C	; 0x803e8c <I2C_0_collision_interrupt_handler+0x1>
     86e:	30 97       	sbiw	r30, 0x00	; 0
     870:	09 f0       	breq	.+2      	; 0x874 <I2C_0_collision_callback+0xe>
		I2C_0_collision_interrupt_handler();
     872:	09 95       	icall
     874:	08 95       	ret

00000876 <I2C_0_set_collision_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_collision_callback(I2C_0_callback handler)
{
	I2C_0_collision_interrupt_handler = handler;
     876:	80 93 8b 3e 	sts	0x3E8B, r24	; 0x803e8b <I2C_0_collision_interrupt_handler>
     87a:	90 93 8c 3e 	sts	0x3E8C, r25	; 0x803e8c <I2C_0_collision_interrupt_handler+0x1>
     87e:	08 95       	ret

00000880 <I2C_0_bus_error_callback>:
}

// Bus Error Event Interrupt Handlers
void I2C_0_bus_error_callback(void)
{
	if (I2C_0_bus_error_interrupt_handler) {
     880:	e0 91 89 3e 	lds	r30, 0x3E89	; 0x803e89 <I2C_0_bus_error_interrupt_handler>
     884:	f0 91 8a 3e 	lds	r31, 0x3E8A	; 0x803e8a <I2C_0_bus_error_interrupt_handler+0x1>
     888:	30 97       	sbiw	r30, 0x00	; 0
     88a:	09 f0       	breq	.+2      	; 0x88e <I2C_0_bus_error_callback+0xe>
		I2C_0_bus_error_interrupt_handler();
     88c:	09 95       	icall
     88e:	08 95       	ret

00000890 <I2C_0_isr>:
 */
void I2C_0_isr()
{
	static char isFirstByte = true; // to bypass the NACK flag for the first byte in a transaction

	if (TWI0.SSTATUS & TWI_COLL_bm) {
     890:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6c7b>
     894:	83 ff       	sbrs	r24, 3
     896:	02 c0       	rjmp	.+4      	; 0x89c <I2C_0_isr+0xc>
		I2C_0_collision_callback();
     898:	e6 df       	rcall	.-52     	; 0x866 <I2C_0_collision_callback>
		return;
     89a:	08 95       	ret
	}

	if (TWI0.SSTATUS & TWI_BUSERR_bm) {
     89c:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6c7b>
     8a0:	82 ff       	sbrs	r24, 2
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <I2C_0_isr+0x18>
		I2C_0_bus_error_callback();
     8a4:	ed df       	rcall	.-38     	; 0x880 <I2C_0_bus_error_callback>
		return;
     8a6:	08 95       	ret
	}

	if ((TWI0.SSTATUS & TWI_APIF_bm) && (TWI0.SSTATUS & TWI_AP_bm)) {
     8a8:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6c7b>
     8ac:	86 ff       	sbrs	r24, 6
     8ae:	09 c0       	rjmp	.+18     	; 0x8c2 <I2C_0_isr+0x32>
     8b0:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6c7b>
     8b4:	80 ff       	sbrs	r24, 0
     8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <I2C_0_isr+0x32>
		I2C_0_address_callback();
     8b8:	bc df       	rcall	.-136    	; 0x832 <I2C_0_address_callback>
		isFirstByte = true;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	80 93 3b 3e 	sts	0x3E3B, r24	; 0x803e3b <isFirstByte.3804>
		return;
     8c0:	08 95       	ret
	}

	if (TWI0.SSTATUS & TWI_DIF_bm) {
     8c2:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6c7b>
     8c6:	88 23       	and	r24, r24
     8c8:	bc f4       	brge	.+46     	; 0x8f8 <I2C_0_isr+0x68>
		if (TWI0.SSTATUS & TWI_DIR_bm) {
     8ca:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6c7b>
     8ce:	81 ff       	sbrs	r24, 1
     8d0:	11 c0       	rjmp	.+34     	; 0x8f4 <I2C_0_isr+0x64>
			// Master wishes to read from slave
			if (!(TWI0.SSTATUS & TWI_RXACK_bm) || isFirstByte) {
     8d2:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6c7b>
     8d6:	84 ff       	sbrs	r24, 4
     8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <I2C_0_isr+0x52>
     8da:	80 91 3b 3e 	lds	r24, 0x3E3B	; 0x803e3b <isFirstByte.3804>
     8de:	88 23       	and	r24, r24
     8e0:	39 f0       	breq	.+14     	; 0x8f0 <I2C_0_isr+0x60>
				// Received ACK from master or First byte of transaction
				isFirstByte = false;
     8e2:	10 92 3b 3e 	sts	0x3E3B, r1	; 0x803e3b <isFirstByte.3804>
				I2C_0_read_callback();
     8e6:	8b df       	rcall	.-234    	; 0x7fe <I2C_0_read_callback>
				TWI0.SCTRLB = TWI_ACKACT_ACK_gc | TWI_SCMD_RESPONSE_gc;
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <gain_setting_int_cap+0x7f6c7a>
     8ee:	08 95       	ret
			} else {
				// Received NACK from master
				I2C_0_goto_unaddressed();
     8f0:	7e df       	rcall	.-260    	; 0x7ee <I2C_0_goto_unaddressed>
     8f2:	08 95       	ret
			}
		} else // Master wishes to write to slave
		{
			I2C_0_write_callback();
     8f4:	91 df       	rcall	.-222    	; 0x818 <I2C_0_write_callback>
     8f6:	08 95       	ret
		}
		return;
	}

	// Check if STOP was received
	if ((TWI0.SSTATUS & TWI_APIF_bm) && (!(TWI0.SSTATUS & TWI_AP_bm))) {
     8f8:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6c7b>
     8fc:	86 ff       	sbrs	r24, 6
     8fe:	08 c0       	rjmp	.+16     	; 0x910 <I2C_0_isr+0x80>
     900:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <gain_setting_int_cap+0x7f6c7b>
     904:	80 fd       	sbrc	r24, 0
     906:	04 c0       	rjmp	.+8      	; 0x910 <I2C_0_isr+0x80>
		I2C_0_stop_callback();
     908:	a1 df       	rcall	.-190    	; 0x84c <I2C_0_stop_callback>
		TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <gain_setting_int_cap+0x7f6c7a>
     910:	08 95       	ret

00000912 <__vector_19>:
		return;
	}
}

ISR(TWI0_TWIS_vect)
{
     912:	1f 92       	push	r1
     914:	0f 92       	push	r0
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	0f 92       	push	r0
     91a:	11 24       	eor	r1, r1
     91c:	2f 93       	push	r18
     91e:	3f 93       	push	r19
     920:	4f 93       	push	r20
     922:	5f 93       	push	r21
     924:	6f 93       	push	r22
     926:	7f 93       	push	r23
     928:	8f 93       	push	r24
     92a:	9f 93       	push	r25
     92c:	af 93       	push	r26
     92e:	bf 93       	push	r27
     930:	ef 93       	push	r30
     932:	ff 93       	push	r31
	I2C_0_isr();
     934:	ad df       	rcall	.-166    	; 0x890 <I2C_0_isr>
}
     936:	ff 91       	pop	r31
     938:	ef 91       	pop	r30
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <I2C_0_set_bus_error_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_bus_error_callback(I2C_0_callback handler)
{
	I2C_0_bus_error_interrupt_handler = handler;
     958:	80 93 89 3e 	sts	0x3E89, r24	; 0x803e89 <I2C_0_bus_error_interrupt_handler>
     95c:	90 93 8a 3e 	sts	0x3E8A, r25	; 0x803e8a <I2C_0_bus_error_interrupt_handler+0x1>
     960:	08 95       	ret

00000962 <I2C_0_init>:
	//		 | 0 << TWI_ADDREN_bp; /* General Call Recognition Enable: disabled */

	// TWI0.SADDRMASK = 0 << TWI_ADDREN_bp /* Address Mask Enable: disabled */
	//		 | 0x0 << TWI_ADDRMASK_gp; /* Address Mask: 0x0 */

	TWI0.SCTRLA = 1 << TWI_APIEN_bp    /* Address/Stop Interrupt Enable: enabled */
     962:	81 ee       	ldi	r24, 0xE1	; 225
     964:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <gain_setting_int_cap+0x7f6c79>
	              | 1 << TWI_ENABLE_bp /* Enable TWI Slave: enabled */
	              | 1 << TWI_PIEN_bp   /* Stop Interrupt Enable: enabled */
	              | 0 << TWI_PMEN_bp   /* Promiscuous Mode Enable: disabled */
	              | 0 << TWI_SMEN_bp;  /* Smart Mode Enable: disabled */

	I2C_0_set_write_callback(NULL);
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	5d df       	rcall	.-326    	; 0x828 <I2C_0_set_write_callback>
	I2C_0_set_read_callback(NULL);
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	4d df       	rcall	.-358    	; 0x80e <I2C_0_set_read_callback>
	I2C_0_set_address_callback(NULL);
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	64 df       	rcall	.-312    	; 0x842 <I2C_0_set_address_callback>
	I2C_0_set_stop_callback(NULL);
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	6e df       	rcall	.-292    	; 0x85c <I2C_0_set_stop_callback>
	I2C_0_set_collision_callback(NULL);
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	78 df       	rcall	.-272    	; 0x876 <I2C_0_set_collision_callback>
	I2C_0_set_bus_error_callback(NULL);
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	e6 df       	rcall	.-52     	; 0x958 <I2C_0_set_bus_error_callback>
     98c:	08 95       	ret

0000098e <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     98e:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     990:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     992:	40 83       	st	Z, r20
	ret                             // Return to caller
     994:	08 95       	ret

00000996 <Timer_init>:
 * \return Initialization status.
 */
int8_t Timer_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     996:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <gain_setting_int_cap+0x7f65a1>
     99a:	81 11       	cpse	r24, r1
     99c:	fc cf       	rjmp	.-8      	; 0x996 <Timer_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     99e:	e0 e4       	ldi	r30, 0x40	; 64
     9a0:	f1 e0       	ldi	r31, 0x01	; 1
     9a2:	81 e8       	ldi	r24, 0x81	; 129
     9a4:	80 83       	st	Z, r24

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	08 95       	ret

000009ae <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	08 95       	ret

000009b2 <check_for_aks_block>:
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	ec 01       	movw	r28, r24
     9c2:	ae 81       	ldd	r26, Y+6	; 0x06
     9c4:	bf 81       	ldd	r27, Y+7	; 0x07
     9c6:	eb 01       	movw	r28, r22
     9c8:	cc 0f       	add	r28, r28
     9ca:	dd 1f       	adc	r29, r29
     9cc:	c6 0f       	add	r28, r22
     9ce:	d7 1f       	adc	r29, r23
     9d0:	ca 0f       	add	r28, r26
     9d2:	db 1f       	adc	r29, r27
     9d4:	fa 80       	ldd	r15, Y+2	; 0x02
     9d6:	fc 01       	movw	r30, r24
     9d8:	44 81       	ldd	r20, Z+4	; 0x04
     9da:	55 81       	ldd	r21, Z+5	; 0x05
     9dc:	e6 e0       	ldi	r30, 0x06	; 6
     9de:	e6 9f       	mul	r30, r22
     9e0:	90 01       	movw	r18, r0
     9e2:	e7 9f       	mul	r30, r23
     9e4:	30 0d       	add	r19, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	8a 01       	movw	r16, r20
     9ea:	02 0f       	add	r16, r18
     9ec:	13 1f       	adc	r17, r19
     9ee:	f8 01       	movw	r30, r16
     9f0:	22 81       	ldd	r18, Z+2	; 0x02
     9f2:	33 81       	ldd	r19, Z+3	; 0x03
     9f4:	f9 01       	movw	r30, r18
     9f6:	21 81       	ldd	r18, Z+1	; 0x01
     9f8:	32 81       	ldd	r19, Z+2	; 0x02
     9fa:	f8 01       	movw	r30, r16
     9fc:	04 81       	ldd	r16, Z+4	; 0x04
     9fe:	15 81       	ldd	r17, Z+5	; 0x05
     a00:	20 1b       	sub	r18, r16
     a02:	31 0b       	sbc	r19, r17
     a04:	e8 81       	ld	r30, Y
     a06:	2e 1b       	sub	r18, r30
     a08:	31 09       	sbc	r19, r1
     a0a:	ec 01       	movw	r28, r24
     a0c:	ea 81       	ldd	r30, Y+2	; 0x02
     a0e:	fb 81       	ldd	r31, Y+3	; 0x03
     a10:	00 81       	ld	r16, Z
     a12:	11 81       	ldd	r17, Z+1	; 0x01
     a14:	fa 01       	movw	r30, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	40 17       	cp	r20, r16
     a1c:	51 07       	cpc	r21, r17
     a1e:	39 f1       	breq	.+78     	; 0xa6e <check_for_aks_block+0xbc>
     a20:	46 17       	cp	r20, r22
     a22:	57 07       	cpc	r21, r23
     a24:	f9 f0       	breq	.+62     	; 0xa64 <check_for_aks_block+0xb2>
     a26:	12 96       	adiw	r26, 0x02	; 2
     a28:	8c 91       	ld	r24, X
     a2a:	12 97       	sbiw	r26, 0x02	; 2
     a2c:	f8 12       	cpse	r15, r24
     a2e:	1a c0       	rjmp	.+52     	; 0xa64 <check_for_aks_block+0xb2>
     a30:	80 81       	ld	r24, Z
     a32:	85 58       	subi	r24, 0x85	; 133
     a34:	82 30       	cpi	r24, 0x02	; 2
     a36:	e8 f0       	brcs	.+58     	; 0xa72 <check_for_aks_block+0xc0>
     a38:	c4 80       	ldd	r12, Z+4	; 0x04
     a3a:	d5 80       	ldd	r13, Z+5	; 0x05
     a3c:	82 81       	ldd	r24, Z+2	; 0x02
     a3e:	93 81       	ldd	r25, Z+3	; 0x03
     a40:	ec 01       	movw	r28, r24
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	c8 16       	cp	r12, r24
     a48:	d9 06       	cpc	r13, r25
     a4a:	60 f4       	brcc	.+24     	; 0xa64 <check_for_aks_block+0xb2>
     a4c:	8c 19       	sub	r24, r12
     a4e:	9d 09       	sbc	r25, r13
     a50:	cc 91       	ld	r28, X
     a52:	d0 e0       	ldi	r29, 0x00	; 0
     a54:	c8 17       	cp	r28, r24
     a56:	d9 07       	cpc	r29, r25
     a58:	28 f4       	brcc	.+10     	; 0xa64 <check_for_aks_block+0xb2>
     a5a:	8c 1b       	sub	r24, r28
     a5c:	9d 0b       	sbc	r25, r29
     a5e:	28 17       	cp	r18, r24
     a60:	39 07       	cpc	r19, r25
     a62:	38 f0       	brcs	.+14     	; 0xa72 <check_for_aks_block+0xc0>
     a64:	4f 5f       	subi	r20, 0xFF	; 255
     a66:	5f 4f       	sbci	r21, 0xFF	; 255
     a68:	13 96       	adiw	r26, 0x03	; 3
     a6a:	36 96       	adiw	r30, 0x06	; 6
     a6c:	d6 cf       	rjmp	.-84     	; 0xa1a <check_for_aks_block+0x68>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <check_for_aks_block+0xc2>
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	df 90       	pop	r13
     a80:	cf 90       	pop	r12
     a82:	08 95       	ret

00000a84 <qtm_update_qtlib_timer>:
     a84:	20 91 4c 3e 	lds	r18, 0x3E4C	; 0x803e4c <qtm_local_ms_timecount>
     a88:	30 91 4d 3e 	lds	r19, 0x3E4D	; 0x803e4d <qtm_local_ms_timecount+0x1>
     a8c:	82 0f       	add	r24, r18
     a8e:	93 1f       	adc	r25, r19
     a90:	80 93 4c 3e 	sts	0x3E4C, r24	; 0x803e4c <qtm_local_ms_timecount>
     a94:	90 93 4d 3e 	sts	0x3E4D, r25	; 0x803e4d <qtm_local_ms_timecount+0x1>
     a98:	08 95       	ret

00000a9a <qtm_init_sensor_key>:
     a9a:	00 97       	sbiw	r24, 0x00	; 0
     a9c:	d9 f0       	breq	.+54     	; 0xad4 <qtm_init_sensor_key+0x3a>
     a9e:	41 15       	cp	r20, r1
     aa0:	51 05       	cpc	r21, r1
     aa2:	c1 f0       	breq	.+48     	; 0xad4 <qtm_init_sensor_key+0x3a>
     aa4:	26 e0       	ldi	r18, 0x06	; 6
     aa6:	62 9f       	mul	r22, r18
     aa8:	b0 01       	movw	r22, r0
     aaa:	11 24       	eor	r1, r1
     aac:	dc 01       	movw	r26, r24
     aae:	14 96       	adiw	r26, 0x04	; 4
     ab0:	ed 91       	ld	r30, X+
     ab2:	fc 91       	ld	r31, X
     ab4:	15 97       	sbiw	r26, 0x05	; 5
     ab6:	e6 0f       	add	r30, r22
     ab8:	f7 1f       	adc	r31, r23
     aba:	21 e0       	ldi	r18, 0x01	; 1
     abc:	20 83       	st	Z, r18
     abe:	14 96       	adiw	r26, 0x04	; 4
     ac0:	8d 91       	ld	r24, X+
     ac2:	9c 91       	ld	r25, X
     ac4:	15 97       	sbiw	r26, 0x05	; 5
     ac6:	fc 01       	movw	r30, r24
     ac8:	e6 0f       	add	r30, r22
     aca:	f7 1f       	adc	r31, r23
     acc:	42 83       	std	Z+2, r20	; 0x02
     ace:	53 83       	std	Z+3, r21	; 0x03
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	08 95       	ret
     ad4:	8b e0       	ldi	r24, 0x0B	; 11
     ad6:	08 95       	ret

00000ad8 <qtm_key_sensors_process>:
     ad8:	2f 92       	push	r2
     ada:	3f 92       	push	r3
     adc:	4f 92       	push	r4
     ade:	5f 92       	push	r5
     ae0:	6f 92       	push	r6
     ae2:	7f 92       	push	r7
     ae4:	8f 92       	push	r8
     ae6:	9f 92       	push	r9
     ae8:	af 92       	push	r10
     aea:	bf 92       	push	r11
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	09 f4       	brne	.+2      	; 0xb02 <qtm_key_sensors_process+0x2a>
     b00:	7c c3       	rjmp	.+1784   	; 0x11fa <qtm_key_sensors_process+0x722>
     b02:	ec 01       	movw	r28, r24
     b04:	a1 2c       	mov	r10, r1
     b06:	b1 2c       	mov	r11, r1
     b08:	81 2c       	mov	r8, r1
     b0a:	91 2c       	mov	r9, r1
     b0c:	21 2c       	mov	r2, r1
     b0e:	d1 2c       	mov	r13, r1
     b10:	55 24       	eor	r5, r5
     b12:	53 94       	inc	r5
     b14:	33 e0       	ldi	r19, 0x03	; 3
     b16:	c3 2e       	mov	r12, r19
     b18:	45 e8       	ldi	r20, 0x85	; 133
     b1a:	64 2e       	mov	r6, r20
     b1c:	56 e8       	ldi	r21, 0x86	; 134
     b1e:	75 2e       	mov	r7, r21
     b20:	62 e0       	ldi	r22, 0x02	; 2
     b22:	36 2e       	mov	r3, r22
     b24:	78 e0       	ldi	r23, 0x08	; 8
     b26:	47 2e       	mov	r4, r23
     b28:	ea 81       	ldd	r30, Y+2	; 0x02
     b2a:	fb 81       	ldd	r31, Y+3	; 0x03
     b2c:	80 81       	ld	r24, Z
     b2e:	91 81       	ldd	r25, Z+1	; 0x01
     b30:	88 16       	cp	r8, r24
     b32:	99 06       	cpc	r9, r25
     b34:	08 f0       	brcs	.+2      	; 0xb38 <qtm_key_sensors_process+0x60>
     b36:	a4 c1       	rjmp	.+840    	; 0xe80 <qtm_key_sensors_process+0x3a8>
     b38:	75 01       	movw	r14, r10
     b3a:	ee 0c       	add	r14, r14
     b3c:	ff 1c       	adc	r15, r15
     b3e:	ec 81       	ldd	r30, Y+4	; 0x04
     b40:	fd 81       	ldd	r31, Y+5	; 0x05
     b42:	ee 0d       	add	r30, r14
     b44:	ff 1d       	adc	r31, r15
     b46:	a2 81       	ldd	r26, Z+2	; 0x02
     b48:	b3 81       	ldd	r27, Z+3	; 0x03
     b4a:	9c 91       	ld	r25, X
     b4c:	9e 71       	andi	r25, 0x1E	; 30
     b4e:	09 f0       	breq	.+2      	; 0xb52 <qtm_key_sensors_process+0x7a>
     b50:	50 82       	st	Z, r5
     b52:	0c 81       	ldd	r16, Y+4	; 0x04
     b54:	1d 81       	ldd	r17, Y+5	; 0x05
     b56:	0e 0d       	add	r16, r14
     b58:	1f 1d       	adc	r17, r15
     b5a:	d8 01       	movw	r26, r16
     b5c:	8c 91       	ld	r24, X
     b5e:	84 30       	cpi	r24, 0x04	; 4
     b60:	09 f4       	brne	.+2      	; 0xb64 <qtm_key_sensors_process+0x8c>
     b62:	9d c0       	rjmp	.+314    	; 0xc9e <qtm_key_sensors_process+0x1c6>
     b64:	38 f4       	brcc	.+14     	; 0xb74 <qtm_key_sensors_process+0x9c>
     b66:	82 30       	cpi	r24, 0x02	; 2
     b68:	d1 f0       	breq	.+52     	; 0xb9e <qtm_key_sensors_process+0xc6>
     b6a:	08 f0       	brcs	.+2      	; 0xb6e <qtm_key_sensors_process+0x96>
     b6c:	45 c0       	rjmp	.+138    	; 0xbf8 <qtm_key_sensors_process+0x120>
     b6e:	81 30       	cpi	r24, 0x01	; 1
     b70:	59 f0       	breq	.+22     	; 0xb88 <qtm_key_sensors_process+0xb0>
     b72:	7f c1       	rjmp	.+766    	; 0xe72 <qtm_key_sensors_process+0x39a>
     b74:	85 38       	cpi	r24, 0x85	; 133
     b76:	09 f4       	brne	.+2      	; 0xb7a <qtm_key_sensors_process+0xa2>
     b78:	bd c0       	rjmp	.+378    	; 0xcf4 <qtm_key_sensors_process+0x21c>
     b7a:	86 38       	cpi	r24, 0x86	; 134
     b7c:	09 f4       	brne	.+2      	; 0xb80 <qtm_key_sensors_process+0xa8>
     b7e:	f3 c0       	rjmp	.+486    	; 0xd66 <qtm_key_sensors_process+0x28e>
     b80:	87 30       	cpi	r24, 0x07	; 7
     b82:	09 f0       	breq	.+2      	; 0xb86 <qtm_key_sensors_process+0xae>
     b84:	76 c1       	rjmp	.+748    	; 0xe72 <qtm_key_sensors_process+0x39a>
     b86:	34 c1       	rjmp	.+616    	; 0xdf0 <qtm_key_sensors_process+0x318>
     b88:	91 11       	cpse	r25, r1
     b8a:	65 c1       	rjmp	.+714    	; 0xe56 <qtm_key_sensors_process+0x37e>
     b8c:	f8 01       	movw	r30, r16
     b8e:	30 82       	st	Z, r3
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	fc 01       	movw	r30, r24
     b96:	ee 0d       	add	r30, r14
     b98:	ff 1d       	adc	r31, r15
     b9a:	41 82       	std	Z+1, r4	; 0x01
     b9c:	5c c1       	rjmp	.+696    	; 0xe56 <qtm_key_sensors_process+0x37e>
     b9e:	d8 01       	movw	r26, r16
     ba0:	11 96       	adiw	r26, 0x01	; 1
     ba2:	2c 91       	ld	r18, X
     ba4:	11 97       	sbiw	r26, 0x01	; 1
     ba6:	22 23       	and	r18, r18
     ba8:	29 f1       	breq	.+74     	; 0xbf4 <qtm_key_sensors_process+0x11c>
     baa:	12 96       	adiw	r26, 0x02	; 2
     bac:	ed 91       	ld	r30, X+
     bae:	fc 91       	ld	r31, X
     bb0:	13 97       	sbiw	r26, 0x03	; 3
     bb2:	25 30       	cpi	r18, 0x05	; 5
     bb4:	18 f0       	brcs	.+6      	; 0xbbc <qtm_key_sensors_process+0xe4>
     bb6:	81 81       	ldd	r24, Z+1	; 0x01
     bb8:	92 81       	ldd	r25, Z+2	; 0x02
     bba:	0e c0       	rjmp	.+28     	; 0xbd8 <qtm_key_sensors_process+0x100>
     bbc:	d8 01       	movw	r26, r16
     bbe:	14 96       	adiw	r26, 0x04	; 4
     bc0:	8d 91       	ld	r24, X+
     bc2:	9c 91       	ld	r25, X
     bc4:	15 97       	sbiw	r26, 0x05	; 5
     bc6:	41 81       	ldd	r20, Z+1	; 0x01
     bc8:	52 81       	ldd	r21, Z+2	; 0x02
     bca:	84 17       	cp	r24, r20
     bcc:	95 07       	cpc	r25, r21
     bce:	69 f0       	breq	.+26     	; 0xbea <qtm_key_sensors_process+0x112>
     bd0:	48 17       	cp	r20, r24
     bd2:	59 07       	cpc	r21, r25
     bd4:	30 f4       	brcc	.+12     	; 0xbe2 <qtm_key_sensors_process+0x10a>
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	14 96       	adiw	r26, 0x04	; 4
     bda:	8d 93       	st	X+, r24
     bdc:	9c 93       	st	X, r25
     bde:	15 97       	sbiw	r26, 0x05	; 5
     be0:	04 c0       	rjmp	.+8      	; 0xbea <qtm_key_sensors_process+0x112>
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	f8 01       	movw	r30, r16
     be6:	84 83       	std	Z+4, r24	; 0x04
     be8:	95 83       	std	Z+5, r25	; 0x05
     bea:	21 50       	subi	r18, 0x01	; 1
     bec:	d8 01       	movw	r26, r16
     bee:	11 96       	adiw	r26, 0x01	; 1
     bf0:	2c 93       	st	X, r18
     bf2:	31 c1       	rjmp	.+610    	; 0xe56 <qtm_key_sensors_process+0x37e>
     bf4:	f8 01       	movw	r30, r16
     bf6:	2b c1       	rjmp	.+598    	; 0xe4e <qtm_key_sensors_process+0x376>
     bf8:	d8 01       	movw	r26, r16
     bfa:	14 96       	adiw	r26, 0x04	; 4
     bfc:	2d 91       	ld	r18, X+
     bfe:	3c 91       	ld	r19, X
     c00:	15 97       	sbiw	r26, 0x05	; 5
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	ed 91       	ld	r30, X+
     c06:	fc 91       	ld	r31, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	41 81       	ldd	r20, Z+1	; 0x01
     c0c:	52 81       	ldd	r21, Z+2	; 0x02
     c0e:	24 17       	cp	r18, r20
     c10:	35 07       	cpc	r19, r21
     c12:	09 f4       	brne	.+2      	; 0xc16 <qtm_key_sensors_process+0x13e>
     c14:	2e c1       	rjmp	.+604    	; 0xe72 <qtm_key_sensors_process+0x39a>
     c16:	8e 81       	ldd	r24, Y+6	; 0x06
     c18:	9f 81       	ldd	r25, Y+7	; 0x07
     c1a:	42 17       	cp	r20, r18
     c1c:	53 07       	cpc	r21, r19
     c1e:	f8 f4       	brcc	.+62     	; 0xc5e <qtm_key_sensors_process+0x186>
     c20:	ea 81       	ldd	r30, Y+2	; 0x02
     c22:	fb 81       	ldd	r31, Y+3	; 0x03
     c24:	24 1b       	sub	r18, r20
     c26:	35 0b       	sbc	r19, r21
     c28:	dc 01       	movw	r26, r24
     c2a:	aa 0d       	add	r26, r10
     c2c:	bb 1d       	adc	r27, r11
     c2e:	8c 91       	ld	r24, X
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	05 80       	ldd	r0, Z+5	; 0x05
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <qtm_key_sensors_process+0x162>
     c36:	95 95       	asr	r25
     c38:	87 95       	ror	r24
     c3a:	0a 94       	dec	r0
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <qtm_key_sensors_process+0x15e>
     c3e:	99 27       	eor	r25, r25
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	08 f4       	brcc	.+2      	; 0xc48 <qtm_key_sensors_process+0x170>
     c46:	15 c1       	rjmp	.+554    	; 0xe72 <qtm_key_sensors_process+0x39a>
     c48:	84 81       	ldd	r24, Z+4	; 0x04
     c4a:	88 23       	and	r24, r24
     c4c:	09 f4       	brne	.+2      	; 0xc50 <qtm_key_sensors_process+0x178>
     c4e:	11 c1       	rjmp	.+546    	; 0xe72 <qtm_key_sensors_process+0x39a>
     c50:	87 e0       	ldi	r24, 0x07	; 7
     c52:	f8 01       	movw	r30, r16
     c54:	80 83       	st	Z, r24
     c56:	ea 81       	ldd	r30, Y+2	; 0x02
     c58:	fb 81       	ldd	r31, Y+3	; 0x03
     c5a:	24 81       	ldd	r18, Z+4	; 0x04
     c5c:	19 c0       	rjmp	.+50     	; 0xc90 <qtm_key_sensors_process+0x1b8>
     c5e:	fc 01       	movw	r30, r24
     c60:	ea 0d       	add	r30, r10
     c62:	fb 1d       	adc	r31, r11
     c64:	42 1b       	sub	r20, r18
     c66:	53 0b       	sbc	r21, r19
     c68:	80 81       	ld	r24, Z
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	48 17       	cp	r20, r24
     c6e:	59 07       	cpc	r21, r25
     c70:	08 f4       	brcc	.+2      	; 0xc74 <qtm_key_sensors_process+0x19c>
     c72:	ff c0       	rjmp	.+510    	; 0xe72 <qtm_key_sensors_process+0x39a>
     c74:	82 81       	ldd	r24, Z+2	; 0x02
     c76:	88 23       	and	r24, r24
     c78:	29 f0       	breq	.+10     	; 0xc84 <qtm_key_sensors_process+0x1ac>
     c7a:	b4 01       	movw	r22, r8
     c7c:	ce 01       	movw	r24, r28
     c7e:	99 de       	rcall	.-718    	; 0x9b2 <check_for_aks_block>
     c80:	81 11       	cpse	r24, r1
     c82:	f7 c0       	rjmp	.+494    	; 0xe72 <qtm_key_sensors_process+0x39a>
     c84:	e4 e0       	ldi	r30, 0x04	; 4
     c86:	d8 01       	movw	r26, r16
     c88:	ec 93       	st	X, r30
     c8a:	ea 81       	ldd	r30, Y+2	; 0x02
     c8c:	fb 81       	ldd	r31, Y+3	; 0x03
     c8e:	22 81       	ldd	r18, Z+2	; 0x02
     c90:	8c 81       	ldd	r24, Y+4	; 0x04
     c92:	9d 81       	ldd	r25, Y+5	; 0x05
     c94:	fc 01       	movw	r30, r24
     c96:	ee 0d       	add	r30, r14
     c98:	ff 1d       	adc	r31, r15
     c9a:	21 83       	std	Z+1, r18	; 0x01
     c9c:	dc c0       	rjmp	.+440    	; 0xe56 <qtm_key_sensors_process+0x37e>
     c9e:	d8 01       	movw	r26, r16
     ca0:	14 96       	adiw	r26, 0x04	; 4
     ca2:	2d 91       	ld	r18, X+
     ca4:	3c 91       	ld	r19, X
     ca6:	15 97       	sbiw	r26, 0x05	; 5
     ca8:	12 96       	adiw	r26, 0x02	; 2
     caa:	ed 91       	ld	r30, X+
     cac:	fc 91       	ld	r31, X
     cae:	13 97       	sbiw	r26, 0x03	; 3
     cb0:	81 81       	ldd	r24, Z+1	; 0x01
     cb2:	92 81       	ldd	r25, Z+2	; 0x02
     cb4:	82 17       	cp	r24, r18
     cb6:	93 07       	cpc	r25, r19
     cb8:	08 f4       	brcc	.+2      	; 0xcbc <qtm_key_sensors_process+0x1e4>
     cba:	ba c0       	rjmp	.+372    	; 0xe30 <qtm_key_sensors_process+0x358>
     cbc:	ee 81       	ldd	r30, Y+6	; 0x06
     cbe:	ff 81       	ldd	r31, Y+7	; 0x07
     cc0:	ea 0d       	add	r30, r10
     cc2:	fb 1d       	adc	r31, r11
     cc4:	82 1b       	sub	r24, r18
     cc6:	93 0b       	sbc	r25, r19
     cc8:	20 81       	ld	r18, Z
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	28 17       	cp	r18, r24
     cce:	39 07       	cpc	r19, r25
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <qtm_key_sensors_process+0x1fc>
     cd2:	c4 c0       	rjmp	.+392    	; 0xe5c <qtm_key_sensors_process+0x384>
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	88 23       	and	r24, r24
     cd8:	29 f0       	breq	.+10     	; 0xce4 <qtm_key_sensors_process+0x20c>
     cda:	b4 01       	movw	r22, r8
     cdc:	ce 01       	movw	r24, r28
     cde:	69 de       	rcall	.-814    	; 0x9b2 <check_for_aks_block>
     ce0:	81 11       	cpse	r24, r1
     ce2:	c7 c0       	rjmp	.+398    	; 0xe72 <qtm_key_sensors_process+0x39a>
     ce4:	f8 01       	movw	r30, r16
     ce6:	81 81       	ldd	r24, Z+1	; 0x01
     ce8:	88 23       	and	r24, r24
     cea:	09 f4       	brne	.+2      	; 0xcee <qtm_key_sensors_process+0x216>
     cec:	6a c0       	rjmp	.+212    	; 0xdc2 <qtm_key_sensors_process+0x2ea>
     cee:	81 50       	subi	r24, 0x01	; 1
     cf0:	81 83       	std	Z+1, r24	; 0x01
     cf2:	b1 c0       	rjmp	.+354    	; 0xe56 <qtm_key_sensors_process+0x37e>
     cf4:	e8 81       	ld	r30, Y
     cf6:	f9 81       	ldd	r31, Y+1	; 0x01
     cf8:	aa 81       	ldd	r26, Y+2	; 0x02
     cfa:	bb 81       	ldd	r27, Y+3	; 0x03
     cfc:	18 96       	adiw	r26, 0x08	; 8
     cfe:	8c 91       	ld	r24, X
     d00:	83 83       	std	Z+3, r24	; 0x03
     d02:	ec 81       	ldd	r30, Y+4	; 0x04
     d04:	fd 81       	ldd	r31, Y+5	; 0x05
     d06:	ee 0d       	add	r30, r14
     d08:	ff 1d       	adc	r31, r15
     d0a:	44 81       	ldd	r20, Z+4	; 0x04
     d0c:	55 81       	ldd	r21, Z+5	; 0x05
     d0e:	a2 81       	ldd	r26, Z+2	; 0x02
     d10:	b3 81       	ldd	r27, Z+3	; 0x03
     d12:	11 96       	adiw	r26, 0x01	; 1
     d14:	8d 91       	ld	r24, X+
     d16:	9c 91       	ld	r25, X
     d18:	12 97       	sbiw	r26, 0x02	; 2
     d1a:	84 17       	cp	r24, r20
     d1c:	95 07       	cpc	r25, r21
     d1e:	c0 f0       	brcs	.+48     	; 0xd50 <qtm_key_sensors_process+0x278>
     d20:	ae 81       	ldd	r26, Y+6	; 0x06
     d22:	bf 81       	ldd	r27, Y+7	; 0x07
     d24:	aa 0d       	add	r26, r10
     d26:	bb 1d       	adc	r27, r11
     d28:	6c 91       	ld	r22, X
     d2a:	26 2f       	mov	r18, r22
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	11 96       	adiw	r26, 0x01	; 1
     d30:	7c 91       	ld	r23, X
     d32:	7f 5f       	subi	r23, 0xFF	; 255
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <qtm_key_sensors_process+0x262>
     d36:	35 95       	asr	r19
     d38:	27 95       	ror	r18
     d3a:	7a 95       	dec	r23
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <qtm_key_sensors_process+0x25e>
     d3e:	84 1b       	sub	r24, r20
     d40:	95 0b       	sbc	r25, r21
     d42:	62 1b       	sub	r22, r18
     d44:	26 2f       	mov	r18, r22
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	28 17       	cp	r18, r24
     d4a:	39 07       	cpc	r19, r25
     d4c:	08 f4       	brcc	.+2      	; 0xd50 <qtm_key_sensors_process+0x278>
     d4e:	8f c0       	rjmp	.+286    	; 0xe6e <qtm_key_sensors_process+0x396>
     d50:	70 82       	st	Z, r7
     d52:	ea 81       	ldd	r30, Y+2	; 0x02
     d54:	fb 81       	ldd	r31, Y+3	; 0x03
     d56:	22 81       	ldd	r18, Z+2	; 0x02
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	9d 81       	ldd	r25, Y+5	; 0x05
     d5c:	fc 01       	movw	r30, r24
     d5e:	ee 0d       	add	r30, r14
     d60:	ff 1d       	adc	r31, r15
     d62:	21 83       	std	Z+1, r18	; 0x01
     d64:	42 c0       	rjmp	.+132    	; 0xdea <qtm_key_sensors_process+0x312>
     d66:	d8 01       	movw	r26, r16
     d68:	14 96       	adiw	r26, 0x04	; 4
     d6a:	6d 91       	ld	r22, X+
     d6c:	7c 91       	ld	r23, X
     d6e:	15 97       	sbiw	r26, 0x05	; 5
     d70:	12 96       	adiw	r26, 0x02	; 2
     d72:	ed 91       	ld	r30, X+
     d74:	fc 91       	ld	r31, X
     d76:	13 97       	sbiw	r26, 0x03	; 3
     d78:	21 81       	ldd	r18, Z+1	; 0x01
     d7a:	32 81       	ldd	r19, Z+2	; 0x02
     d7c:	26 17       	cp	r18, r22
     d7e:	37 07       	cpc	r19, r23
     d80:	58 f4       	brcc	.+22     	; 0xd98 <qtm_key_sensors_process+0x2c0>
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	8c 91       	ld	r24, X
     d86:	11 97       	sbiw	r26, 0x01	; 1
     d88:	81 11       	cpse	r24, r1
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <qtm_key_sensors_process+0x2b8>
     d8c:	cc 92       	st	X, r12
     d8e:	6f c0       	rjmp	.+222    	; 0xe6e <qtm_key_sensors_process+0x396>
     d90:	81 50       	subi	r24, 0x01	; 1
     d92:	f8 01       	movw	r30, r16
     d94:	81 83       	std	Z+1, r24	; 0x01
     d96:	6b c0       	rjmp	.+214    	; 0xe6e <qtm_key_sensors_process+0x396>
     d98:	ee 81       	ldd	r30, Y+6	; 0x06
     d9a:	ff 81       	ldd	r31, Y+7	; 0x07
     d9c:	ea 0d       	add	r30, r10
     d9e:	fb 1d       	adc	r31, r11
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	9f 5f       	subi	r25, 0xFF	; 255
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <qtm_key_sensors_process+0x2d8>
     dac:	55 95       	asr	r21
     dae:	47 95       	ror	r20
     db0:	9a 95       	dec	r25
     db2:	e2 f7       	brpl	.-8      	; 0xdac <qtm_key_sensors_process+0x2d4>
     db4:	26 1b       	sub	r18, r22
     db6:	37 0b       	sbc	r19, r23
     db8:	84 1b       	sub	r24, r20
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	82 17       	cp	r24, r18
     dbe:	93 07       	cpc	r25, r19
     dc0:	60 f4       	brcc	.+24     	; 0xdda <qtm_key_sensors_process+0x302>
     dc2:	d8 01       	movw	r26, r16
     dc4:	6c 92       	st	X, r6
     dc6:	ea 81       	ldd	r30, Y+2	; 0x02
     dc8:	fb 81       	ldd	r31, Y+3	; 0x03
     dca:	23 81       	ldd	r18, Z+3	; 0x03
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	9d 81       	ldd	r25, Y+5	; 0x05
     dd0:	fc 01       	movw	r30, r24
     dd2:	ee 0d       	add	r30, r14
     dd4:	ff 1d       	adc	r31, r15
     dd6:	21 83       	std	Z+1, r18	; 0x01
     dd8:	4a c0       	rjmp	.+148    	; 0xe6e <qtm_key_sensors_process+0x396>
     dda:	f8 01       	movw	r30, r16
     ddc:	81 81       	ldd	r24, Z+1	; 0x01
     dde:	81 11       	cpse	r24, r1
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <qtm_key_sensors_process+0x30e>
     de2:	c0 82       	st	Z, r12
     de4:	44 c0       	rjmp	.+136    	; 0xe6e <qtm_key_sensors_process+0x396>
     de6:	81 50       	subi	r24, 0x01	; 1
     de8:	81 83       	std	Z+1, r24	; 0x01
     dea:	22 24       	eor	r2, r2
     dec:	23 94       	inc	r2
     dee:	33 c0       	rjmp	.+102    	; 0xe56 <qtm_key_sensors_process+0x37e>
     df0:	f8 01       	movw	r30, r16
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	02 80       	ldd	r0, Z+2	; 0x02
     df8:	f3 81       	ldd	r31, Z+3	; 0x03
     dfa:	e0 2d       	mov	r30, r0
     dfc:	81 81       	ldd	r24, Z+1	; 0x01
     dfe:	92 81       	ldd	r25, Z+2	; 0x02
     e00:	82 17       	cp	r24, r18
     e02:	93 07       	cpc	r25, r19
     e04:	58 f5       	brcc	.+86     	; 0xe5c <qtm_key_sensors_process+0x384>
     e06:	28 1b       	sub	r18, r24
     e08:	39 0b       	sbc	r19, r25
     e0a:	ee 81       	ldd	r30, Y+6	; 0x06
     e0c:	ff 81       	ldd	r31, Y+7	; 0x07
     e0e:	ea 0d       	add	r30, r10
     e10:	fb 1d       	adc	r31, r11
     e12:	80 81       	ld	r24, Z
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	ea 81       	ldd	r30, Y+2	; 0x02
     e18:	fb 81       	ldd	r31, Y+3	; 0x03
     e1a:	05 80       	ldd	r0, Z+5	; 0x05
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <qtm_key_sensors_process+0x34a>
     e1e:	95 95       	asr	r25
     e20:	87 95       	ror	r24
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <qtm_key_sensors_process+0x346>
     e26:	99 27       	eor	r25, r25
     e28:	28 17       	cp	r18, r24
     e2a:	39 07       	cpc	r19, r25
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <qtm_key_sensors_process+0x35c>
     e2e:	d8 01       	movw	r26, r16
     e30:	cc 92       	st	X, r12
     e32:	16 c0       	rjmp	.+44     	; 0xe60 <qtm_key_sensors_process+0x388>
     e34:	f8 01       	movw	r30, r16
     e36:	81 81       	ldd	r24, Z+1	; 0x01
     e38:	81 11       	cpse	r24, r1
     e3a:	0b c0       	rjmp	.+22     	; 0xe52 <qtm_key_sensors_process+0x37a>
     e3c:	50 82       	st	Z, r5
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	9d 81       	ldd	r25, Y+5	; 0x05
     e42:	fc 01       	movw	r30, r24
     e44:	ee 0d       	add	r30, r14
     e46:	ff 1d       	adc	r31, r15
     e48:	02 80       	ldd	r0, Z+2	; 0x02
     e4a:	f3 81       	ldd	r31, Z+3	; 0x03
     e4c:	e0 2d       	mov	r30, r0
     e4e:	c0 82       	st	Z, r12
     e50:	10 c0       	rjmp	.+32     	; 0xe72 <qtm_key_sensors_process+0x39a>
     e52:	81 50       	subi	r24, 0x01	; 1
     e54:	81 83       	std	Z+1, r24	; 0x01
     e56:	dd 24       	eor	r13, r13
     e58:	d3 94       	inc	r13
     e5a:	0b c0       	rjmp	.+22     	; 0xe72 <qtm_key_sensors_process+0x39a>
     e5c:	f8 01       	movw	r30, r16
     e5e:	c0 82       	st	Z, r12
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	fc 01       	movw	r30, r24
     e66:	ee 0d       	add	r30, r14
     e68:	ff 1d       	adc	r31, r15
     e6a:	11 82       	std	Z+1, r1	; 0x01
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <qtm_key_sensors_process+0x39a>
     e6e:	22 24       	eor	r2, r2
     e70:	23 94       	inc	r2
     e72:	ff ef       	ldi	r31, 0xFF	; 255
     e74:	8f 1a       	sub	r8, r31
     e76:	9f 0a       	sbc	r9, r31
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	a8 0e       	add	r10, r24
     e7c:	b1 1c       	adc	r11, r1
     e7e:	54 ce       	rjmp	.-856    	; 0xb28 <qtm_key_sensors_process+0x50>
     e80:	e8 81       	ld	r30, Y
     e82:	f9 81       	ldd	r31, Y+1	; 0x01
     e84:	80 81       	ld	r24, Z
     e86:	87 ff       	sbrs	r24, 7
     e88:	23 c0       	rjmp	.+70     	; 0xed0 <qtm_key_sensors_process+0x3f8>
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	ea 81       	ldd	r30, Y+2	; 0x02
     e94:	fb 81       	ldd	r31, Y+3	; 0x03
     e96:	80 81       	ld	r24, Z
     e98:	91 81       	ldd	r25, Z+1	; 0x01
     e9a:	28 17       	cp	r18, r24
     e9c:	39 07       	cpc	r19, r25
     e9e:	98 f4       	brcc	.+38     	; 0xec6 <qtm_key_sensors_process+0x3ee>
     ea0:	ec 81       	ldd	r30, Y+4	; 0x04
     ea2:	fd 81       	ldd	r31, Y+5	; 0x05
     ea4:	e4 0f       	add	r30, r20
     ea6:	f5 1f       	adc	r31, r21
     ea8:	a2 81       	ldd	r26, Z+2	; 0x02
     eaa:	b3 81       	ldd	r27, Z+3	; 0x03
     eac:	8c 91       	ld	r24, X
     eae:	80 fd       	sbrc	r24, 0
     eb0:	05 c0       	rjmp	.+10     	; 0xebc <qtm_key_sensors_process+0x3e4>
     eb2:	90 81       	ld	r25, Z
     eb4:	97 7f       	andi	r25, 0xF7	; 247
     eb6:	11 f0       	breq	.+4      	; 0xebc <qtm_key_sensors_process+0x3e4>
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	8c 93       	st	X, r24
     ebc:	2f 5f       	subi	r18, 0xFF	; 255
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255
     ec0:	4a 5f       	subi	r20, 0xFA	; 250
     ec2:	5f 4f       	sbci	r21, 0xFF	; 255
     ec4:	e6 cf       	rjmp	.-52     	; 0xe92 <qtm_key_sensors_process+0x3ba>
     ec6:	e8 81       	ld	r30, Y
     ec8:	f9 81       	ldd	r31, Y+1	; 0x01
     eca:	80 81       	ld	r24, Z
     ecc:	8f 77       	andi	r24, 0x7F	; 127
     ece:	80 83       	st	Z, r24
     ed0:	d1 10       	cpse	r13, r1
     ed2:	07 c0       	rjmp	.+14     	; 0xee2 <qtm_key_sensors_process+0x40a>
     ed4:	e8 81       	ld	r30, Y
     ed6:	f9 81       	ldd	r31, Y+1	; 0x01
     ed8:	21 10       	cpse	r2, r1
     eda:	6f c0       	rjmp	.+222    	; 0xfba <qtm_key_sensors_process+0x4e2>
     edc:	80 81       	ld	r24, Z
     ede:	8e 7f       	andi	r24, 0xFE	; 254
     ee0:	6e c0       	rjmp	.+220    	; 0xfbe <qtm_key_sensors_process+0x4e6>
     ee2:	ea 81       	ldd	r30, Y+2	; 0x02
     ee4:	fb 81       	ldd	r31, Y+3	; 0x03
     ee6:	81 85       	ldd	r24, Z+9	; 0x09
     ee8:	88 23       	and	r24, r24
     eea:	a1 f3       	breq	.-24     	; 0xed4 <qtm_key_sensors_process+0x3fc>
     eec:	e8 81       	ld	r30, Y
     eee:	f9 81       	ldd	r31, Y+1	; 0x01
     ef0:	80 81       	ld	r24, Z
     ef2:	80 68       	ori	r24, 0x80	; 128
     ef4:	80 83       	st	Z, r24
     ef6:	ea 81       	ldd	r30, Y+2	; 0x02
     ef8:	fb 81       	ldd	r31, Y+3	; 0x03
     efa:	81 85       	ldd	r24, Z+9	; 0x09
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	51 f7       	brne	.-44     	; 0xed4 <qtm_key_sensors_process+0x3fc>
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	96 e0       	ldi	r25, 0x06	; 6
     f0a:	d9 2e       	mov	r13, r25
     f0c:	ea 81       	ldd	r30, Y+2	; 0x02
     f0e:	fb 81       	ldd	r31, Y+3	; 0x03
     f10:	60 81       	ld	r22, Z
     f12:	71 81       	ldd	r23, Z+1	; 0x01
     f14:	26 17       	cp	r18, r22
     f16:	37 07       	cpc	r19, r23
     f18:	e8 f6       	brcc	.-70     	; 0xed4 <qtm_key_sensors_process+0x3fc>
     f1a:	0c 81       	ldd	r16, Y+4	; 0x04
     f1c:	1d 81       	ldd	r17, Y+5	; 0x05
     f1e:	fa 01       	movw	r30, r20
     f20:	ee 0f       	add	r30, r30
     f22:	ff 1f       	adc	r31, r31
     f24:	e0 0f       	add	r30, r16
     f26:	f1 1f       	adc	r31, r17
     f28:	80 81       	ld	r24, Z
     f2a:	98 2f       	mov	r25, r24
     f2c:	97 7f       	andi	r25, 0xF7	; 247
     f2e:	a1 f1       	breq	.+104    	; 0xf98 <qtm_key_sensors_process+0x4c0>
     f30:	85 38       	cpi	r24, 0x85	; 133
     f32:	11 f0       	breq	.+4      	; 0xf38 <qtm_key_sensors_process+0x460>
     f34:	83 30       	cpi	r24, 0x03	; 3
     f36:	b1 f5       	brne	.+108    	; 0xfa4 <qtm_key_sensors_process+0x4cc>
     f38:	ee 80       	ldd	r14, Y+6	; 0x06
     f3a:	ff 80       	ldd	r15, Y+7	; 0x07
     f3c:	d7 01       	movw	r26, r14
     f3e:	a4 0f       	add	r26, r20
     f40:	b5 1f       	adc	r27, r21
     f42:	12 96       	adiw	r26, 0x02	; 2
     f44:	bc 90       	ld	r11, X
     f46:	bb 20       	and	r11, r11
     f48:	39 f1       	breq	.+78     	; 0xf98 <qtm_key_sensors_process+0x4c0>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	c1 2c       	mov	r12, r1
     f50:	86 17       	cp	r24, r22
     f52:	97 07       	cpc	r25, r23
     f54:	f8 f4       	brcc	.+62     	; 0xf94 <qtm_key_sensors_process+0x4bc>
     f56:	28 17       	cp	r18, r24
     f58:	39 07       	cpc	r19, r25
     f5a:	d1 f0       	breq	.+52     	; 0xf90 <qtm_key_sensors_process+0x4b8>
     f5c:	d8 9e       	mul	r13, r24
     f5e:	d0 01       	movw	r26, r0
     f60:	d9 9e       	mul	r13, r25
     f62:	b0 0d       	add	r27, r0
     f64:	11 24       	eor	r1, r1
     f66:	a0 0f       	add	r26, r16
     f68:	b1 1f       	adc	r27, r17
     f6a:	ac 91       	ld	r26, X
     f6c:	a4 30       	cpi	r26, 0x04	; 4
     f6e:	11 f0       	breq	.+4      	; 0xf74 <qtm_key_sensors_process+0x49c>
     f70:	a6 38       	cpi	r26, 0x86	; 134
     f72:	71 f4       	brne	.+28     	; 0xf90 <qtm_key_sensors_process+0x4b8>
     f74:	dc 01       	movw	r26, r24
     f76:	aa 0f       	add	r26, r26
     f78:	bb 1f       	adc	r27, r27
     f7a:	a8 0f       	add	r26, r24
     f7c:	b9 1f       	adc	r27, r25
     f7e:	ae 0d       	add	r26, r14
     f80:	bf 1d       	adc	r27, r15
     f82:	12 96       	adiw	r26, 0x02	; 2
     f84:	ac 91       	ld	r26, X
     f86:	ba 12       	cpse	r11, r26
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <qtm_key_sensors_process+0x4b8>
     f8a:	cb 01       	movw	r24, r22
     f8c:	cc 24       	eor	r12, r12
     f8e:	c3 94       	inc	r12
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	de cf       	rjmp	.-68     	; 0xf50 <qtm_key_sensors_process+0x478>
     f94:	c1 10       	cpse	r12, r1
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <qtm_key_sensors_process+0x4cc>
     f98:	02 80       	ldd	r0, Z+2	; 0x02
     f9a:	f3 81       	ldd	r31, Z+3	; 0x03
     f9c:	e0 2d       	mov	r30, r0
     f9e:	80 81       	ld	r24, Z
     fa0:	8e 7f       	andi	r24, 0xFE	; 254
     fa2:	05 c0       	rjmp	.+10     	; 0xfae <qtm_key_sensors_process+0x4d6>
     fa4:	02 80       	ldd	r0, Z+2	; 0x02
     fa6:	f3 81       	ldd	r31, Z+3	; 0x03
     fa8:	e0 2d       	mov	r30, r0
     faa:	80 81       	ld	r24, Z
     fac:	81 60       	ori	r24, 0x01	; 1
     fae:	80 83       	st	Z, r24
     fb0:	2f 5f       	subi	r18, 0xFF	; 255
     fb2:	3f 4f       	sbci	r19, 0xFF	; 255
     fb4:	4d 5f       	subi	r20, 0xFD	; 253
     fb6:	5f 4f       	sbci	r21, 0xFF	; 255
     fb8:	a9 cf       	rjmp	.-174    	; 0xf0c <qtm_key_sensors_process+0x434>
     fba:	80 81       	ld	r24, Z
     fbc:	81 60       	ori	r24, 0x01	; 1
     fbe:	80 83       	st	Z, r24
     fc0:	80 91 4c 3e 	lds	r24, 0x3E4C	; 0x803e4c <qtm_local_ms_timecount>
     fc4:	90 91 4d 3e 	lds	r25, 0x3E4D	; 0x803e4d <qtm_local_ms_timecount+0x1>
     fc8:	e8 81       	ld	r30, Y
     fca:	f9 81       	ldd	r31, Y+1	; 0x01
     fcc:	21 81       	ldd	r18, Z+1	; 0x01
     fce:	32 81       	ldd	r19, Z+2	; 0x02
     fd0:	a9 01       	movw	r20, r18
     fd2:	48 53       	subi	r20, 0x38	; 56
     fd4:	5f 4f       	sbci	r21, 0xFF	; 255
     fd6:	48 17       	cp	r20, r24
     fd8:	59 07       	cpc	r21, r25
     fda:	38 f4       	brcc	.+14     	; 0xfea <qtm_key_sensors_process+0x512>
     fdc:	82 1b       	sub	r24, r18
     fde:	93 0b       	sbc	r25, r19
     fe0:	aa 24       	eor	r10, r10
     fe2:	a3 94       	inc	r10
     fe4:	a3 e0       	ldi	r26, 0x03	; 3
     fe6:	ba 2e       	mov	r11, r26
     fe8:	44 c0       	rjmp	.+136    	; 0x1072 <qtm_key_sensors_process+0x59a>
     fea:	82 17       	cp	r24, r18
     fec:	93 07       	cpc	r25, r19
     fee:	10 f0       	brcs	.+4      	; 0xff4 <qtm_key_sensors_process+0x51c>
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	04 c1       	rjmp	.+520    	; 0x11fc <qtm_key_sensors_process+0x724>
     ff4:	82 1b       	sub	r24, r18
     ff6:	93 0b       	sbc	r25, r19
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	89 3c       	cpi	r24, 0xC9	; 201
     ffc:	91 05       	cpc	r25, r1
     ffe:	c0 f3       	brcs	.-16     	; 0xff0 <qtm_key_sensors_process+0x518>
    1000:	ef cf       	rjmp	.-34     	; 0xfe0 <qtm_key_sensors_process+0x508>
    1002:	88 5c       	subi	r24, 0xC8	; 200
    1004:	91 09       	sbc	r25, r1
    1006:	e8 81       	ld	r30, Y
    1008:	f9 81       	ldd	r31, Y+1	; 0x01
    100a:	21 81       	ldd	r18, Z+1	; 0x01
    100c:	32 81       	ldd	r19, Z+2	; 0x02
    100e:	28 53       	subi	r18, 0x38	; 56
    1010:	3f 4f       	sbci	r19, 0xFF	; 255
    1012:	21 83       	std	Z+1, r18	; 0x01
    1014:	32 83       	std	Z+2, r19	; 0x02
    1016:	23 81       	ldd	r18, Z+3	; 0x03
    1018:	21 11       	cpse	r18, r1
    101a:	96 c0       	rjmp	.+300    	; 0x1148 <qtm_key_sensors_process+0x670>
    101c:	24 81       	ldd	r18, Z+4	; 0x04
    101e:	22 23       	and	r18, r18
    1020:	11 f0       	breq	.+4      	; 0x1026 <qtm_key_sensors_process+0x54e>
    1022:	21 50       	subi	r18, 0x01	; 1
    1024:	24 83       	std	Z+4, r18	; 0x04
    1026:	e8 81       	ld	r30, Y
    1028:	f9 81       	ldd	r31, Y+1	; 0x01
    102a:	25 81       	ldd	r18, Z+5	; 0x05
    102c:	22 23       	and	r18, r18
    102e:	11 f0       	breq	.+4      	; 0x1034 <qtm_key_sensors_process+0x55c>
    1030:	21 50       	subi	r18, 0x01	; 1
    1032:	25 83       	std	Z+5, r18	; 0x05
    1034:	8a 80       	ldd	r8, Y+2	; 0x02
    1036:	9b 80       	ldd	r9, Y+3	; 0x03
    1038:	d4 01       	movw	r26, r8
    103a:	16 96       	adiw	r26, 0x06	; 6
    103c:	2c 91       	ld	r18, X
    103e:	16 97       	sbiw	r26, 0x06	; 6
    1040:	21 11       	cpse	r18, r1
    1042:	1b c0       	rjmp	.+54     	; 0x107a <qtm_key_sensors_process+0x5a2>
    1044:	8a 80       	ldd	r8, Y+2	; 0x02
    1046:	9b 80       	ldd	r9, Y+3	; 0x03
    1048:	f4 01       	movw	r30, r8
    104a:	27 81       	ldd	r18, Z+7	; 0x07
    104c:	21 11       	cpse	r18, r1
    104e:	48 c0       	rjmp	.+144    	; 0x10e0 <qtm_key_sensors_process+0x608>
    1050:	ea 81       	ldd	r30, Y+2	; 0x02
    1052:	fb 81       	ldd	r31, Y+3	; 0x03
    1054:	23 81       	ldd	r18, Z+3	; 0x03
    1056:	22 23       	and	r18, r18
    1058:	61 f0       	breq	.+24     	; 0x1072 <qtm_key_sensors_process+0x59a>
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	a0 e0       	ldi	r26, 0x00	; 0
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ea 81       	ldd	r30, Y+2	; 0x02
    1064:	fb 81       	ldd	r31, Y+3	; 0x03
    1066:	40 81       	ld	r20, Z
    1068:	51 81       	ldd	r21, Z+1	; 0x01
    106a:	a4 17       	cp	r26, r20
    106c:	b5 07       	cpc	r27, r21
    106e:	08 f4       	brcc	.+2      	; 0x1072 <qtm_key_sensors_process+0x59a>
    1070:	6e c0       	rjmp	.+220    	; 0x114e <qtm_key_sensors_process+0x676>
    1072:	89 3c       	cpi	r24, 0xC9	; 201
    1074:	91 05       	cpc	r25, r1
    1076:	28 f6       	brcc	.-118    	; 0x1002 <qtm_key_sensors_process+0x52a>
    1078:	bb cf       	rjmp	.-138    	; 0xff0 <qtm_key_sensors_process+0x518>
    107a:	08 81       	ld	r16, Y
    107c:	19 81       	ldd	r17, Y+1	; 0x01
    107e:	f8 01       	movw	r30, r16
    1080:	24 81       	ldd	r18, Z+4	; 0x04
    1082:	21 11       	cpse	r18, r1
    1084:	df cf       	rjmp	.-66     	; 0x1044 <qtm_key_sensors_process+0x56c>
    1086:	ed 90       	ld	r14, X+
    1088:	fc 90       	ld	r15, X
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	4e 15       	cp	r20, r14
    1094:	5f 05       	cpc	r21, r15
    1096:	f1 f0       	breq	.+60     	; 0x10d4 <qtm_key_sensors_process+0x5fc>
    1098:	ec 81       	ldd	r30, Y+4	; 0x04
    109a:	fd 81       	ldd	r31, Y+5	; 0x05
    109c:	e6 0f       	add	r30, r22
    109e:	f7 1f       	adc	r31, r23
    10a0:	20 81       	ld	r18, Z
    10a2:	23 30       	cpi	r18, 0x03	; 3
    10a4:	11 f0       	breq	.+4      	; 0x10aa <qtm_key_sensors_process+0x5d2>
    10a6:	28 30       	cpi	r18, 0x08	; 8
    10a8:	81 f4       	brne	.+32     	; 0x10ca <qtm_key_sensors_process+0x5f2>
    10aa:	24 81       	ldd	r18, Z+4	; 0x04
    10ac:	35 81       	ldd	r19, Z+5	; 0x05
    10ae:	c2 80       	ldd	r12, Z+2	; 0x02
    10b0:	d3 80       	ldd	r13, Z+3	; 0x03
    10b2:	d6 01       	movw	r26, r12
    10b4:	11 96       	adiw	r26, 0x01	; 1
    10b6:	cd 90       	ld	r12, X+
    10b8:	dc 90       	ld	r13, X
    10ba:	12 97       	sbiw	r26, 0x02	; 2
    10bc:	2c 15       	cp	r18, r12
    10be:	3d 05       	cpc	r19, r13
    10c0:	20 f4       	brcc	.+8      	; 0x10ca <qtm_key_sensors_process+0x5f2>
    10c2:	2f 5f       	subi	r18, 0xFF	; 255
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	24 83       	std	Z+4, r18	; 0x04
    10c8:	35 83       	std	Z+5, r19	; 0x05
    10ca:	4f 5f       	subi	r20, 0xFF	; 255
    10cc:	5f 4f       	sbci	r21, 0xFF	; 255
    10ce:	6a 5f       	subi	r22, 0xFA	; 250
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	df cf       	rjmp	.-66     	; 0x1092 <qtm_key_sensors_process+0x5ba>
    10d4:	f4 01       	movw	r30, r8
    10d6:	26 81       	ldd	r18, Z+6	; 0x06
    10d8:	d8 01       	movw	r26, r16
    10da:	14 96       	adiw	r26, 0x04	; 4
    10dc:	2c 93       	st	X, r18
    10de:	b2 cf       	rjmp	.-156    	; 0x1044 <qtm_key_sensors_process+0x56c>
    10e0:	08 81       	ld	r16, Y
    10e2:	19 81       	ldd	r17, Y+1	; 0x01
    10e4:	d8 01       	movw	r26, r16
    10e6:	15 96       	adiw	r26, 0x05	; 5
    10e8:	2c 91       	ld	r18, X
    10ea:	21 11       	cpse	r18, r1
    10ec:	b1 cf       	rjmp	.-158    	; 0x1050 <qtm_key_sensors_process+0x578>
    10ee:	e0 80       	ld	r14, Z
    10f0:	f1 80       	ldd	r15, Z+1	; 0x01
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	4e 15       	cp	r20, r14
    10fc:	5f 05       	cpc	r21, r15
    10fe:	f1 f0       	breq	.+60     	; 0x113c <qtm_key_sensors_process+0x664>
    1100:	ec 81       	ldd	r30, Y+4	; 0x04
    1102:	fd 81       	ldd	r31, Y+5	; 0x05
    1104:	e6 0f       	add	r30, r22
    1106:	f7 1f       	adc	r31, r23
    1108:	20 81       	ld	r18, Z
    110a:	23 30       	cpi	r18, 0x03	; 3
    110c:	11 f0       	breq	.+4      	; 0x1112 <qtm_key_sensors_process+0x63a>
    110e:	28 30       	cpi	r18, 0x08	; 8
    1110:	81 f4       	brne	.+32     	; 0x1132 <qtm_key_sensors_process+0x65a>
    1112:	24 81       	ldd	r18, Z+4	; 0x04
    1114:	35 81       	ldd	r19, Z+5	; 0x05
    1116:	c2 80       	ldd	r12, Z+2	; 0x02
    1118:	d3 80       	ldd	r13, Z+3	; 0x03
    111a:	d6 01       	movw	r26, r12
    111c:	11 96       	adiw	r26, 0x01	; 1
    111e:	cd 90       	ld	r12, X+
    1120:	dc 90       	ld	r13, X
    1122:	12 97       	sbiw	r26, 0x02	; 2
    1124:	c2 16       	cp	r12, r18
    1126:	d3 06       	cpc	r13, r19
    1128:	20 f4       	brcc	.+8      	; 0x1132 <qtm_key_sensors_process+0x65a>
    112a:	21 50       	subi	r18, 0x01	; 1
    112c:	31 09       	sbc	r19, r1
    112e:	24 83       	std	Z+4, r18	; 0x04
    1130:	35 83       	std	Z+5, r19	; 0x05
    1132:	4f 5f       	subi	r20, 0xFF	; 255
    1134:	5f 4f       	sbci	r21, 0xFF	; 255
    1136:	6a 5f       	subi	r22, 0xFA	; 250
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	df cf       	rjmp	.-66     	; 0x10fa <qtm_key_sensors_process+0x622>
    113c:	f4 01       	movw	r30, r8
    113e:	27 81       	ldd	r18, Z+7	; 0x07
    1140:	d8 01       	movw	r26, r16
    1142:	15 96       	adiw	r26, 0x05	; 5
    1144:	2c 93       	st	X, r18
    1146:	84 cf       	rjmp	.-248    	; 0x1050 <qtm_key_sensors_process+0x578>
    1148:	21 50       	subi	r18, 0x01	; 1
    114a:	23 83       	std	Z+3, r18	; 0x03
    114c:	81 cf       	rjmp	.-254    	; 0x1050 <qtm_key_sensors_process+0x578>
    114e:	a9 01       	movw	r20, r18
    1150:	44 0f       	add	r20, r20
    1152:	55 1f       	adc	r21, r21
    1154:	ec 81       	ldd	r30, Y+4	; 0x04
    1156:	fd 81       	ldd	r31, Y+5	; 0x05
    1158:	e4 0f       	add	r30, r20
    115a:	f5 1f       	adc	r31, r21
    115c:	60 81       	ld	r22, Z
    115e:	65 38       	cpi	r22, 0x85	; 133
    1160:	09 f0       	breq	.+2      	; 0x1164 <qtm_key_sensors_process+0x68c>
    1162:	47 c0       	rjmp	.+142    	; 0x11f2 <qtm_key_sensors_process+0x71a>
    1164:	61 81       	ldd	r22, Z+1	; 0x01
    1166:	66 23       	and	r22, r22
    1168:	19 f0       	breq	.+6      	; 0x1170 <qtm_key_sensors_process+0x698>
    116a:	61 50       	subi	r22, 0x01	; 1
    116c:	61 83       	std	Z+1, r22	; 0x01
    116e:	41 c0       	rjmp	.+130    	; 0x11f2 <qtm_key_sensors_process+0x71a>
    1170:	a0 82       	st	Z, r10
    1172:	6c 81       	ldd	r22, Y+4	; 0x04
    1174:	7d 81       	ldd	r23, Y+5	; 0x05
    1176:	fb 01       	movw	r30, r22
    1178:	e4 0f       	add	r30, r20
    117a:	f5 1f       	adc	r31, r21
    117c:	02 80       	ldd	r0, Z+2	; 0x02
    117e:	f3 81       	ldd	r31, Z+3	; 0x03
    1180:	e0 2d       	mov	r30, r0
    1182:	b0 82       	st	Z, r11
    1184:	ee 81       	ldd	r30, Y+6	; 0x06
    1186:	ff 81       	ldd	r31, Y+7	; 0x07
    1188:	e2 0f       	add	r30, r18
    118a:	f3 1f       	adc	r31, r19
    118c:	d2 80       	ldd	r13, Z+2	; 0x02
    118e:	dd 20       	and	r13, r13
    1190:	81 f1       	breq	.+96     	; 0x11f2 <qtm_key_sensors_process+0x71a>
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	00 e0       	ldi	r16, 0x00	; 0
    1198:	10 e0       	ldi	r17, 0x00	; 0
    119a:	ea 81       	ldd	r30, Y+2	; 0x02
    119c:	fb 81       	ldd	r31, Y+3	; 0x03
    119e:	60 81       	ld	r22, Z
    11a0:	71 81       	ldd	r23, Z+1	; 0x01
    11a2:	06 17       	cp	r16, r22
    11a4:	17 07       	cpc	r17, r23
    11a6:	28 f5       	brcc	.+74     	; 0x11f2 <qtm_key_sensors_process+0x71a>
    11a8:	ee 81       	ldd	r30, Y+6	; 0x06
    11aa:	ff 81       	ldd	r31, Y+7	; 0x07
    11ac:	e4 0f       	add	r30, r20
    11ae:	f5 1f       	adc	r31, r21
    11b0:	62 81       	ldd	r22, Z+2	; 0x02
    11b2:	d6 12       	cpse	r13, r22
    11b4:	19 c0       	rjmp	.+50     	; 0x11e8 <qtm_key_sensors_process+0x710>
    11b6:	ba 01       	movw	r22, r20
    11b8:	66 0f       	add	r22, r22
    11ba:	77 1f       	adc	r23, r23
    11bc:	ec 81       	ldd	r30, Y+4	; 0x04
    11be:	fd 81       	ldd	r31, Y+5	; 0x05
    11c0:	4f 01       	movw	r8, r30
    11c2:	86 0e       	add	r8, r22
    11c4:	97 1e       	adc	r9, r23
    11c6:	f4 01       	movw	r30, r8
    11c8:	e2 80       	ldd	r14, Z+2	; 0x02
    11ca:	f3 80       	ldd	r15, Z+3	; 0x03
    11cc:	f7 01       	movw	r30, r14
    11ce:	f0 80       	ld	r15, Z
    11d0:	f0 fe       	sbrs	r15, 0
    11d2:	0a c0       	rjmp	.+20     	; 0x11e8 <qtm_key_sensors_process+0x710>
    11d4:	f4 01       	movw	r30, r8
    11d6:	a0 82       	st	Z, r10
    11d8:	ec 81       	ldd	r30, Y+4	; 0x04
    11da:	fd 81       	ldd	r31, Y+5	; 0x05
    11dc:	e6 0f       	add	r30, r22
    11de:	f7 1f       	adc	r31, r23
    11e0:	02 80       	ldd	r0, Z+2	; 0x02
    11e2:	f3 81       	ldd	r31, Z+3	; 0x03
    11e4:	e0 2d       	mov	r30, r0
    11e6:	b0 82       	st	Z, r11
    11e8:	0f 5f       	subi	r16, 0xFF	; 255
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	4d 5f       	subi	r20, 0xFD	; 253
    11ee:	5f 4f       	sbci	r21, 0xFF	; 255
    11f0:	d4 cf       	rjmp	.-88     	; 0x119a <qtm_key_sensors_process+0x6c2>
    11f2:	11 96       	adiw	r26, 0x01	; 1
    11f4:	2d 5f       	subi	r18, 0xFD	; 253
    11f6:	3f 4f       	sbci	r19, 0xFF	; 255
    11f8:	34 cf       	rjmp	.-408    	; 0x1062 <qtm_key_sensors_process+0x58a>
    11fa:	8b e0       	ldi	r24, 0x0B	; 11
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	bf 90       	pop	r11
    120e:	af 90       	pop	r10
    1210:	9f 90       	pop	r9
    1212:	8f 90       	pop	r8
    1214:	7f 90       	pop	r7
    1216:	6f 90       	pop	r6
    1218:	5f 90       	pop	r5
    121a:	4f 90       	pop	r4
    121c:	3f 90       	pop	r3
    121e:	2f 90       	pop	r2
    1220:	08 95       	ret

00001222 <select_next_channel_to_measure>:
    1222:	80 91 51 3e 	lds	r24, 0x3E51	; 0x803e51 <current_measure_channel>
    1226:	90 91 52 3e 	lds	r25, 0x3E52	; 0x803e52 <current_measure_channel+0x1>
    122a:	a0 91 8d 3e 	lds	r26, 0x3E8D	; 0x803e8d <qtm_acquisition_control_working_set_ptr>
    122e:	b0 91 8e 3e 	lds	r27, 0x3E8E	; 0x803e8e <qtm_acquisition_control_working_set_ptr+0x1>
    1232:	ed 91       	ld	r30, X+
    1234:	fc 91       	ld	r31, X
    1236:	11 97       	sbiw	r26, 0x01	; 1
    1238:	40 81       	ld	r20, Z
    123a:	51 81       	ldd	r21, Z+1	; 0x01
    123c:	25 e0       	ldi	r18, 0x05	; 5
    123e:	28 9f       	mul	r18, r24
    1240:	b0 01       	movw	r22, r0
    1242:	29 9f       	mul	r18, r25
    1244:	70 0d       	add	r23, r0
    1246:	11 24       	eor	r1, r1
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	84 17       	cp	r24, r20
    124e:	95 07       	cpc	r25, r21
    1250:	a8 f4       	brcc	.+42     	; 0x127c <select_next_channel_to_measure+0x5a>
    1252:	14 96       	adiw	r26, 0x04	; 4
    1254:	ed 91       	ld	r30, X+
    1256:	fc 91       	ld	r31, X
    1258:	15 97       	sbiw	r26, 0x05	; 5
    125a:	e2 0f       	add	r30, r18
    125c:	f3 1f       	adc	r31, r19
    125e:	e6 0f       	add	r30, r22
    1260:	f7 1f       	adc	r31, r23
    1262:	e0 81       	ld	r30, Z
    1264:	2b 5f       	subi	r18, 0xFB	; 251
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	e0 fd       	sbrc	r30, 0
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <select_next_channel_to_measure+0x4e>
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	ee cf       	rjmp	.-36     	; 0x124c <select_next_channel_to_measure+0x2a>
    1270:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <current_measure_channel>
    1274:	90 93 52 3e 	sts	0x3E52, r25	; 0x803e52 <current_measure_channel+0x1>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	08 95       	ret
    127c:	10 92 51 3e 	sts	0x3E51, r1	; 0x803e51 <current_measure_channel>
    1280:	10 92 52 3e 	sts	0x3E52, r1	; 0x803e52 <current_measure_channel+0x1>
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	08 95       	ret

00001288 <qtm_measure_node>:
    1288:	bc 01       	movw	r22, r24
    128a:	e0 91 8d 3e 	lds	r30, 0x3E8D	; 0x803e8d <qtm_acquisition_control_working_set_ptr>
    128e:	f0 91 8e 3e 	lds	r31, 0x3E8E	; 0x803e8e <qtm_acquisition_control_working_set_ptr+0x1>
    1292:	86 e0       	ldi	r24, 0x06	; 6
    1294:	86 9f       	mul	r24, r22
    1296:	90 01       	movw	r18, r0
    1298:	87 9f       	mul	r24, r23
    129a:	30 0d       	add	r19, r0
    129c:	11 24       	eor	r1, r1
    129e:	a2 81       	ldd	r26, Z+2	; 0x02
    12a0:	b3 81       	ldd	r27, Z+3	; 0x03
    12a2:	a2 0f       	add	r26, r18
    12a4:	b3 1f       	adc	r27, r19
    12a6:	11 96       	adiw	r26, 0x01	; 1
    12a8:	8c 91       	ld	r24, X
    12aa:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <gain_setting_int_cap+0x7f6a8a>
    12ae:	a2 81       	ldd	r26, Z+2	; 0x02
    12b0:	b3 81       	ldd	r27, Z+3	; 0x03
    12b2:	a2 0f       	add	r26, r18
    12b4:	b3 1f       	adc	r27, r19
    12b6:	8c 91       	ld	r24, X
    12b8:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <gain_setting_int_cap+0x7f6a86>
    12bc:	95 e0       	ldi	r25, 0x05	; 5
    12be:	96 9f       	mul	r25, r22
    12c0:	a0 01       	movw	r20, r0
    12c2:	97 9f       	mul	r25, r23
    12c4:	50 0d       	add	r21, r0
    12c6:	11 24       	eor	r1, r1
    12c8:	a4 81       	ldd	r26, Z+4	; 0x04
    12ca:	b5 81       	ldd	r27, Z+5	; 0x05
    12cc:	a4 0f       	add	r26, r20
    12ce:	b5 1f       	adc	r27, r21
    12d0:	13 96       	adiw	r26, 0x03	; 3
    12d2:	8c 91       	ld	r24, X
    12d4:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <gain_setting_int_cap+0x7f6a7a>
    12d8:	a4 81       	ldd	r26, Z+4	; 0x04
    12da:	b5 81       	ldd	r27, Z+5	; 0x05
    12dc:	a4 0f       	add	r26, r20
    12de:	b5 1f       	adc	r27, r21
    12e0:	14 96       	adiw	r26, 0x04	; 4
    12e2:	8c 91       	ld	r24, X
    12e4:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <gain_setting_int_cap+0x7f6a7b>
    12e8:	a4 81       	ldd	r26, Z+4	; 0x04
    12ea:	b5 81       	ldd	r27, Z+5	; 0x05
    12ec:	a4 0f       	add	r26, r20
    12ee:	b5 1f       	adc	r27, r21
    12f0:	8c 91       	ld	r24, X
    12f2:	81 fd       	sbrc	r24, 1
    12f4:	9c 93       	st	X, r25
    12f6:	84 81       	ldd	r24, Z+4	; 0x04
    12f8:	95 81       	ldd	r25, Z+5	; 0x05
    12fa:	dc 01       	movw	r26, r24
    12fc:	a4 0f       	add	r26, r20
    12fe:	b5 1f       	adc	r27, r21
    1300:	8c 91       	ld	r24, X
    1302:	8c 71       	andi	r24, 0x1C	; 28
    1304:	69 f4       	brne	.+26     	; 0x1320 <qtm_measure_node+0x98>
    1306:	a2 81       	ldd	r26, Z+2	; 0x02
    1308:	b3 81       	ldd	r27, Z+3	; 0x03
    130a:	a2 0f       	add	r26, r18
    130c:	b3 1f       	adc	r27, r19
    130e:	14 96       	adiw	r26, 0x04	; 4
    1310:	ac 91       	ld	r26, X
    1312:	a2 95       	swap	r26
    1314:	af 70       	andi	r26, 0x0F	; 15
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	a0 56       	subi	r26, 0x60	; 96
    131a:	b4 46       	sbci	r27, 0x64	; 100
    131c:	8c 91       	ld	r24, X
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <qtm_measure_node+0x9a>
    1320:	8f e3       	ldi	r24, 0x3F	; 63
    1322:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <gain_setting_int_cap+0x7f6a7c>
    1326:	a2 81       	ldd	r26, Z+2	; 0x02
    1328:	b3 81       	ldd	r27, Z+3	; 0x03
    132a:	a2 0f       	add	r26, r18
    132c:	b3 1f       	adc	r27, r19
    132e:	12 96       	adiw	r26, 0x02	; 2
    1330:	8c 91       	ld	r24, X
    1332:	8b 31       	cpi	r24, 0x1B	; 27
    1334:	10 f4       	brcc	.+4      	; 0x133a <qtm_measure_node+0xb2>
    1336:	8c 5f       	subi	r24, 0xFC	; 252
    1338:	01 c0       	rjmp	.+2      	; 0x133c <qtm_measure_node+0xb4>
    133a:	8f e1       	ldi	r24, 0x1F	; 31
    133c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <gain_setting_int_cap+0x7f6a65>
    1340:	a2 81       	ldd	r26, Z+2	; 0x02
    1342:	b3 81       	ldd	r27, Z+3	; 0x03
    1344:	a2 0f       	add	r26, r18
    1346:	b3 1f       	adc	r27, r19
    1348:	15 96       	adiw	r26, 0x05	; 5
    134a:	8c 91       	ld	r24, X
    134c:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <gain_setting_int_cap+0x7f6a61>
    1350:	a2 81       	ldd	r26, Z+2	; 0x02
    1352:	b3 81       	ldd	r27, Z+3	; 0x03
    1354:	a2 0f       	add	r26, r18
    1356:	b3 1f       	adc	r27, r19
    1358:	13 96       	adiw	r26, 0x03	; 3
    135a:	8c 91       	ld	r24, X
    135c:	82 95       	swap	r24
    135e:	8f 70       	andi	r24, 0x0F	; 15
    1360:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <gain_setting_int_cap+0x7f6a79>
    1364:	82 81       	ldd	r24, Z+2	; 0x02
    1366:	93 81       	ldd	r25, Z+3	; 0x03
    1368:	fc 01       	movw	r30, r24
    136a:	e2 0f       	add	r30, r18
    136c:	f3 1f       	adc	r31, r19
    136e:	83 81       	ldd	r24, Z+3	; 0x03
    1370:	8f 70       	andi	r24, 0x0F	; 15
    1372:	80 61       	ori	r24, 0x10	; 16
    1374:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <gain_setting_int_cap+0x7f6a62>
    1378:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f6a78>
    137c:	83 60       	ori	r24, 0x03	; 3
    137e:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <gain_setting_int_cap+0x7f6a78>
    1382:	81 e8       	ldi	r24, 0x81	; 129
    1384:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <gain_setting_int_cap+0x7f6a60>
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <gain_setting_int_cap+0x7f6a68>
    138e:	08 95       	ret

00001390 <qtm_acquisition_process>:
    1390:	3f 92       	push	r3
    1392:	4f 92       	push	r4
    1394:	5f 92       	push	r5
    1396:	6f 92       	push	r6
    1398:	7f 92       	push	r7
    139a:	8f 92       	push	r8
    139c:	9f 92       	push	r9
    139e:	af 92       	push	r10
    13a0:	bf 92       	push	r11
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	80 91 50 3e 	lds	r24, 0x3E50	; 0x803e50 <touch_seq_lib_state>
    13b6:	88 23       	and	r24, r24
    13b8:	09 f4       	brne	.+2      	; 0x13bc <qtm_acquisition_process+0x2c>
    13ba:	48 c1       	rjmp	.+656    	; 0x164c <qtm_acquisition_process+0x2bc>
    13bc:	a0 91 8d 3e 	lds	r26, 0x3E8D	; 0x803e8d <qtm_acquisition_control_working_set_ptr>
    13c0:	b0 91 8e 3e 	lds	r27, 0x3E8E	; 0x803e8e <qtm_acquisition_control_working_set_ptr+0x1>
    13c4:	c0 90 8f 3e 	lds	r12, 0x3E8F	; 0x803e8f <qtm_raw_data_measurements_ptr>
    13c8:	d0 90 90 3e 	lds	r13, 0x3E90	; 0x803e90 <qtm_raw_data_measurements_ptr+0x1>
    13cc:	00 e0       	ldi	r16, 0x00	; 0
    13ce:	10 e0       	ldi	r17, 0x00	; 0
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	e1 2c       	mov	r14, r1
    13d6:	f1 2c       	mov	r15, r1
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	33 24       	eor	r3, r3
    13dc:	33 94       	inc	r3
    13de:	d1 e8       	ldi	r29, 0x81	; 129
    13e0:	4d 2e       	mov	r4, r29
    13e2:	88 24       	eor	r8, r8
    13e4:	8a 94       	dec	r8
    13e6:	99 24       	eor	r9, r9
    13e8:	93 94       	inc	r9
    13ea:	6d 90       	ld	r6, X+
    13ec:	7c 90       	ld	r7, X
    13ee:	11 97       	sbiw	r26, 0x01	; 1
    13f0:	f3 01       	movw	r30, r6
    13f2:	20 81       	ld	r18, Z
    13f4:	31 81       	ldd	r19, Z+1	; 0x01
    13f6:	e2 16       	cp	r14, r18
    13f8:	f3 06       	cpc	r15, r19
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <qtm_acquisition_process+0x6e>
    13fc:	23 c1       	rjmp	.+582    	; 0x1644 <qtm_acquisition_process+0x2b4>
    13fe:	e6 01       	movw	r28, r12
    1400:	29 91       	ld	r18, Y+
    1402:	39 91       	ld	r19, Y+
    1404:	6e 01       	movw	r12, r28
    1406:	14 96       	adiw	r26, 0x04	; 4
    1408:	ed 91       	ld	r30, X+
    140a:	fc 91       	ld	r31, X
    140c:	15 97       	sbiw	r26, 0x05	; 5
    140e:	e6 0f       	add	r30, r22
    1410:	f7 1f       	adc	r31, r23
    1412:	40 81       	ld	r20, Z
    1414:	4c 71       	andi	r20, 0x1C	; 28
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	56 95       	lsr	r21
    141a:	47 95       	ror	r20
    141c:	56 95       	lsr	r21
    141e:	47 95       	ror	r20
    1420:	41 15       	cp	r20, r1
    1422:	51 05       	cpc	r21, r1
    1424:	21 f0       	breq	.+8      	; 0x142e <qtm_acquisition_process+0x9e>
    1426:	41 30       	cpi	r20, 0x01	; 1
    1428:	51 05       	cpc	r21, r1
    142a:	b9 f0       	breq	.+46     	; 0x145a <qtm_acquisition_process+0xca>
    142c:	02 c1       	rjmp	.+516    	; 0x1632 <qtm_acquisition_process+0x2a2>
    142e:	12 96       	adiw	r26, 0x02	; 2
    1430:	cd 91       	ld	r28, X+
    1432:	dc 91       	ld	r29, X
    1434:	13 97       	sbiw	r26, 0x03	; 3
    1436:	c0 0f       	add	r28, r16
    1438:	d1 1f       	adc	r29, r17
    143a:	4c 81       	ldd	r20, Y+4	; 0x04
    143c:	4f 70       	andi	r20, 0x0F	; 15
    143e:	9d 81       	ldd	r25, Y+5	; 0x05
    1440:	49 17       	cp	r20, r25
    1442:	10 f4       	brcc	.+4      	; 0x1448 <qtm_acquisition_process+0xb8>
    1444:	94 1b       	sub	r25, r20
    1446:	01 c0       	rjmp	.+2      	; 0x144a <qtm_acquisition_process+0xba>
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <qtm_acquisition_process+0xc0>
    144c:	36 95       	lsr	r19
    144e:	27 95       	ror	r18
    1450:	9a 95       	dec	r25
    1452:	e2 f7       	brpl	.-8      	; 0x144c <qtm_acquisition_process+0xbc>
    1454:	21 83       	std	Z+1, r18	; 0x01
    1456:	32 83       	std	Z+2, r19	; 0x02
    1458:	ed c0       	rjmp	.+474    	; 0x1634 <qtm_acquisition_process+0x2a4>
    145a:	12 96       	adiw	r26, 0x02	; 2
    145c:	4d 91       	ld	r20, X+
    145e:	5c 91       	ld	r21, X
    1460:	13 97       	sbiw	r26, 0x03	; 3
    1462:	40 0f       	add	r20, r16
    1464:	51 1f       	adc	r21, r17
    1466:	ea 01       	movw	r28, r20
    1468:	0d 80       	ldd	r0, Y+5	; 0x05
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <qtm_acquisition_process+0xe0>
    146c:	36 95       	lsr	r19
    146e:	27 95       	ror	r18
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <qtm_acquisition_process+0xdc>
    1474:	21 83       	std	Z+1, r18	; 0x01
    1476:	32 83       	std	Z+2, r19	; 0x02
    1478:	a3 80       	ldd	r10, Z+3	; 0x03
    147a:	b4 80       	ldd	r11, Z+4	; 0x04
    147c:	21 15       	cp	r18, r1
    147e:	d2 e0       	ldi	r29, 0x02	; 2
    1480:	3d 07       	cpc	r19, r29
    1482:	20 f0       	brcs	.+8      	; 0x148c <qtm_acquisition_process+0xfc>
    1484:	2f 5f       	subi	r18, 0xFF	; 255
    1486:	31 40       	sbci	r19, 0x01	; 1
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	05 c0       	rjmp	.+10     	; 0x1496 <qtm_acquisition_process+0x106>
    148c:	a4 01       	movw	r20, r8
    148e:	42 1b       	sub	r20, r18
    1490:	53 0b       	sbc	r21, r19
    1492:	9a 01       	movw	r18, r20
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	e3 01       	movw	r28, r6
    1498:	5a 80       	ldd	r5, Y+2	; 0x02
    149a:	d0 e4       	ldi	r29, 0x40	; 64
    149c:	5d 12       	cpse	r5, r29
    149e:	05 c0       	rjmp	.+10     	; 0x14aa <qtm_acquisition_process+0x11a>
    14a0:	36 95       	lsr	r19
    14a2:	27 95       	ror	r18
    14a4:	99 23       	and	r25, r25
    14a6:	19 f0       	breq	.+6      	; 0x14ae <qtm_acquisition_process+0x11e>
    14a8:	09 c0       	rjmp	.+18     	; 0x14bc <qtm_acquisition_process+0x12c>
    14aa:	99 23       	and	r25, r25
    14ac:	39 f0       	breq	.+14     	; 0x14bc <qtm_acquisition_process+0x12c>
    14ae:	4f ef       	ldi	r20, 0xFF	; 255
    14b0:	a4 16       	cp	r10, r20
    14b2:	b4 06       	cpc	r11, r20
    14b4:	31 f4       	brne	.+12     	; 0x14c2 <qtm_acquisition_process+0x132>
    14b6:	40 82       	st	Z, r4
    14b8:	8e e0       	ldi	r24, 0x0E	; 14
    14ba:	07 c0       	rjmp	.+14     	; 0x14ca <qtm_acquisition_process+0x13a>
    14bc:	77 24       	eor	r7, r7
    14be:	73 94       	inc	r7
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <qtm_acquisition_process+0x134>
    14c2:	71 2c       	mov	r7, r1
    14c4:	2a 30       	cpi	r18, 0x0A	; 10
    14c6:	31 05       	cpc	r19, r1
    14c8:	90 f4       	brcc	.+36     	; 0x14ee <qtm_acquisition_process+0x15e>
    14ca:	14 96       	adiw	r26, 0x04	; 4
    14cc:	ed 91       	ld	r30, X+
    14ce:	fc 91       	ld	r31, X
    14d0:	15 97       	sbiw	r26, 0x05	; 5
    14d2:	e6 0f       	add	r30, r22
    14d4:	f7 1f       	adc	r31, r23
    14d6:	90 81       	ld	r25, Z
    14d8:	97 ff       	sbrs	r25, 7
    14da:	30 82       	st	Z, r3
    14dc:	14 96       	adiw	r26, 0x04	; 4
    14de:	ed 91       	ld	r30, X+
    14e0:	fc 91       	ld	r31, X
    14e2:	15 97       	sbiw	r26, 0x05	; 5
    14e4:	e6 0f       	add	r30, r22
    14e6:	f7 1f       	adc	r31, r23
    14e8:	a3 82       	std	Z+3, r10	; 0x03
    14ea:	b4 82       	std	Z+4, r11	; 0x04
    14ec:	a3 c0       	rjmp	.+326    	; 0x1634 <qtm_acquisition_process+0x2a4>
    14ee:	e5 01       	movw	r28, r10
    14f0:	cd 2f       	mov	r28, r29
    14f2:	dd 27       	eor	r29, r29
    14f4:	c2 95       	swap	r28
    14f6:	cf 70       	andi	r28, 0x0F	; 15
    14f8:	9c 2f       	mov	r25, r28
    14fa:	a5 01       	movw	r20, r10
    14fc:	44 27       	eor	r20, r20
    14fe:	5f 70       	andi	r21, 0x0F	; 15
    1500:	65 2e       	mov	r6, r21
    1502:	a5 01       	movw	r20, r10
    1504:	40 7f       	andi	r20, 0xF0	; 240
    1506:	55 27       	eor	r21, r21
    1508:	52 95       	swap	r21
    150a:	42 95       	swap	r20
    150c:	4f 70       	andi	r20, 0x0F	; 15
    150e:	45 27       	eor	r20, r21
    1510:	5f 70       	andi	r21, 0x0F	; 15
    1512:	45 27       	eor	r20, r21
    1514:	5a 2d       	mov	r21, r10
    1516:	5f 70       	andi	r21, 0x0F	; 15
    1518:	a5 2e       	mov	r10, r21
    151a:	c4 30       	cpi	r28, 0x04	; 4
    151c:	30 f0       	brcs	.+12     	; 0x152a <qtm_acquisition_process+0x19a>
    151e:	93 70       	andi	r25, 0x03	; 3
    1520:	d6 95       	lsr	r29
    1522:	c7 95       	ror	r28
    1524:	d6 95       	lsr	r29
    1526:	c7 95       	ror	r28
    1528:	9c 0f       	add	r25, r28
    152a:	71 10       	cpse	r7, r1
    152c:	3c c0       	rjmp	.+120    	; 0x15a6 <qtm_acquisition_process+0x216>
    152e:	50 e8       	ldi	r21, 0x80	; 128
    1530:	55 0d       	add	r21, r5
    1532:	52 30       	cpi	r21, 0x02	; 2
    1534:	10 f4       	brcc	.+4      	; 0x153a <qtm_acquisition_process+0x1aa>
    1536:	56 e0       	ldi	r21, 0x06	; 6
    1538:	07 c0       	rjmp	.+14     	; 0x1548 <qtm_acquisition_process+0x1b8>
    153a:	53 e0       	ldi	r21, 0x03	; 3
    153c:	05 c0       	rjmp	.+10     	; 0x1548 <qtm_acquisition_process+0x1b8>
    153e:	95 17       	cp	r25, r21
    1540:	68 f4       	brcc	.+26     	; 0x155c <qtm_acquisition_process+0x1cc>
    1542:	9f 5f       	subi	r25, 0xFF	; 255
    1544:	2f 5c       	subi	r18, 0xCF	; 207
    1546:	31 09       	sbc	r19, r1
    1548:	20 3d       	cpi	r18, 0xD0	; 208
    154a:	31 05       	cpc	r19, r1
    154c:	c0 f7       	brcc	.-16     	; 0x153e <qtm_acquisition_process+0x1ae>
    154e:	06 c0       	rjmp	.+12     	; 0x155c <qtm_acquisition_process+0x1cc>
    1550:	cf e0       	ldi	r28, 0x0F	; 15
    1552:	6c 16       	cp	r6, r28
    1554:	49 f0       	breq	.+18     	; 0x1568 <qtm_acquisition_process+0x1d8>
    1556:	63 94       	inc	r6
    1558:	25 51       	subi	r18, 0x15	; 21
    155a:	31 09       	sbc	r19, r1
    155c:	26 31       	cpi	r18, 0x16	; 22
    155e:	31 05       	cpc	r19, r1
    1560:	b8 f7       	brcc	.-18     	; 0x1550 <qtm_acquisition_process+0x1c0>
    1562:	df e0       	ldi	r29, 0x0F	; 15
    1564:	6d 12       	cpse	r6, r29
    1566:	0e c0       	rjmp	.+28     	; 0x1584 <qtm_acquisition_process+0x1f4>
    1568:	95 17       	cp	r25, r21
    156a:	20 f4       	brcc	.+8      	; 0x1574 <qtm_acquisition_process+0x1e4>
    156c:	9f 5f       	subi	r25, 0xFF	; 255
    156e:	d5 e0       	ldi	r29, 0x05	; 5
    1570:	6d 2e       	mov	r6, r29
    1572:	08 c0       	rjmp	.+16     	; 0x1584 <qtm_acquisition_process+0x1f4>
    1574:	cf e0       	ldi	r28, 0x0F	; 15
    1576:	6c 2e       	mov	r6, r28
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <qtm_acquisition_process+0x1f4>
    157a:	4f 30       	cpi	r20, 0x0F	; 15
    157c:	49 f0       	breq	.+18     	; 0x1590 <qtm_acquisition_process+0x200>
    157e:	4f 5f       	subi	r20, 0xFF	; 255
    1580:	22 50       	subi	r18, 0x02	; 2
    1582:	31 09       	sbc	r19, r1
    1584:	23 30       	cpi	r18, 0x03	; 3
    1586:	31 05       	cpc	r19, r1
    1588:	c0 f7       	brcc	.-16     	; 0x157a <qtm_acquisition_process+0x1ea>
    158a:	4f 30       	cpi	r20, 0x0F	; 15
    158c:	09 f0       	breq	.+2      	; 0x1590 <qtm_acquisition_process+0x200>
    158e:	65 c0       	rjmp	.+202    	; 0x165a <qtm_acquisition_process+0x2ca>
    1590:	4f e0       	ldi	r20, 0x0F	; 15
    1592:	64 16       	cp	r6, r20
    1594:	81 f1       	breq	.+96     	; 0x15f6 <qtm_acquisition_process+0x266>
    1596:	63 94       	inc	r6
    1598:	45 e0       	ldi	r20, 0x05	; 5
    159a:	5f c0       	rjmp	.+190    	; 0x165a <qtm_acquisition_process+0x2ca>
    159c:	99 23       	and	r25, r25
    159e:	61 f0       	breq	.+24     	; 0x15b8 <qtm_acquisition_process+0x228>
    15a0:	91 50       	subi	r25, 0x01	; 1
    15a2:	2f 5c       	subi	r18, 0xCF	; 207
    15a4:	31 09       	sbc	r19, r1
    15a6:	20 3d       	cpi	r18, 0xD0	; 208
    15a8:	31 05       	cpc	r19, r1
    15aa:	c0 f7       	brcc	.-16     	; 0x159c <qtm_acquisition_process+0x20c>
    15ac:	05 c0       	rjmp	.+10     	; 0x15b8 <qtm_acquisition_process+0x228>
    15ae:	66 20       	and	r6, r6
    15b0:	41 f0       	breq	.+16     	; 0x15c2 <qtm_acquisition_process+0x232>
    15b2:	6a 94       	dec	r6
    15b4:	25 51       	subi	r18, 0x15	; 21
    15b6:	31 09       	sbc	r19, r1
    15b8:	26 31       	cpi	r18, 0x16	; 22
    15ba:	31 05       	cpc	r19, r1
    15bc:	c0 f7       	brcc	.-16     	; 0x15ae <qtm_acquisition_process+0x21e>
    15be:	61 10       	cpse	r6, r1
    15c0:	0d c0       	rjmp	.+26     	; 0x15dc <qtm_acquisition_process+0x24c>
    15c2:	99 23       	and	r25, r25
    15c4:	21 f0       	breq	.+8      	; 0x15ce <qtm_acquisition_process+0x23e>
    15c6:	91 50       	subi	r25, 0x01	; 1
    15c8:	5a e0       	ldi	r21, 0x0A	; 10
    15ca:	65 2e       	mov	r6, r21
    15cc:	07 c0       	rjmp	.+14     	; 0x15dc <qtm_acquisition_process+0x24c>
    15ce:	61 2c       	mov	r6, r1
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <qtm_acquisition_process+0x24c>
    15d2:	44 23       	and	r20, r20
    15d4:	41 f0       	breq	.+16     	; 0x15e6 <qtm_acquisition_process+0x256>
    15d6:	41 50       	subi	r20, 0x01	; 1
    15d8:	22 50       	subi	r18, 0x02	; 2
    15da:	31 09       	sbc	r19, r1
    15dc:	23 30       	cpi	r18, 0x03	; 3
    15de:	31 05       	cpc	r19, r1
    15e0:	c0 f7       	brcc	.-16     	; 0x15d2 <qtm_acquisition_process+0x242>
    15e2:	41 11       	cpse	r20, r1
    15e4:	10 c0       	rjmp	.+32     	; 0x1606 <qtm_acquisition_process+0x276>
    15e6:	66 20       	and	r6, r6
    15e8:	e9 f1       	breq	.+122    	; 0x1664 <qtm_acquisition_process+0x2d4>
    15ea:	6a 94       	dec	r6
    15ec:	4a e0       	ldi	r20, 0x0A	; 10
    15ee:	23 30       	cpi	r18, 0x03	; 3
    15f0:	31 05       	cpc	r19, r1
    15f2:	c8 f6       	brcc	.-78     	; 0x15a6 <qtm_acquisition_process+0x216>
    15f4:	08 c0       	rjmp	.+16     	; 0x1606 <qtm_acquisition_process+0x276>
    15f6:	59 13       	cpse	r21, r25
    15f8:	2f c0       	rjmp	.+94     	; 0x1658 <qtm_acquisition_process+0x2c8>
    15fa:	23 30       	cpi	r18, 0x03	; 3
    15fc:	31 05       	cpc	r19, r1
    15fe:	40 f1       	brcs	.+80     	; 0x1650 <qtm_acquisition_process+0x2c0>
    1600:	4f e0       	ldi	r20, 0x0F	; 15
    1602:	a4 2e       	mov	r10, r20
    1604:	4f e0       	ldi	r20, 0x0F	; 15
    1606:	94 30       	cpi	r25, 0x04	; 4
    1608:	18 f0       	brcs	.+6      	; 0x1610 <qtm_acquisition_process+0x280>
    160a:	99 0f       	add	r25, r25
    160c:	99 0f       	add	r25, r25
    160e:	99 50       	subi	r25, 0x09	; 9
    1610:	c0 e1       	ldi	r28, 0x10	; 16
    1612:	4c 9f       	mul	r20, r28
    1614:	a0 01       	movw	r20, r0
    1616:	11 24       	eor	r1, r1
    1618:	56 29       	or	r21, r6
    161a:	4a 29       	or	r20, r10
    161c:	c9 2f       	mov	r28, r25
    161e:	d0 e0       	ldi	r29, 0x00	; 0
    1620:	dc 2f       	mov	r29, r28
    1622:	cc 27       	eor	r28, r28
    1624:	d2 95       	swap	r29
    1626:	d0 7f       	andi	r29, 0xF0	; 240
    1628:	4c 2b       	or	r20, r28
    162a:	5d 2b       	or	r21, r29
    162c:	43 83       	std	Z+3, r20	; 0x03
    162e:	54 83       	std	Z+4, r21	; 0x04
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <qtm_acquisition_process+0x2a4>
    1632:	ff cf       	rjmp	.-2      	; 0x1632 <qtm_acquisition_process+0x2a2>
    1634:	df ef       	ldi	r29, 0xFF	; 255
    1636:	ed 1a       	sub	r14, r29
    1638:	fd 0a       	sbc	r15, r29
    163a:	6b 5f       	subi	r22, 0xFB	; 251
    163c:	7f 4f       	sbci	r23, 0xFF	; 255
    163e:	0a 5f       	subi	r16, 0xFA	; 250
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
    1642:	d3 ce       	rjmp	.-602    	; 0x13ea <qtm_acquisition_process+0x5a>
    1644:	92 e0       	ldi	r25, 0x02	; 2
    1646:	90 93 50 3e 	sts	0x3E50, r25	; 0x803e50 <touch_seq_lib_state>
    164a:	0e c0       	rjmp	.+28     	; 0x1668 <qtm_acquisition_process+0x2d8>
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	0c c0       	rjmp	.+24     	; 0x1668 <qtm_acquisition_process+0x2d8>
    1650:	4f e0       	ldi	r20, 0x0F	; 15
    1652:	2f e0       	ldi	r18, 0x0F	; 15
    1654:	a2 2e       	mov	r10, r18
    1656:	d7 cf       	rjmp	.-82     	; 0x1606 <qtm_acquisition_process+0x276>
    1658:	4f e0       	ldi	r20, 0x0F	; 15
    165a:	23 30       	cpi	r18, 0x03	; 3
    165c:	31 05       	cpc	r19, r1
    165e:	08 f0       	brcs	.+2      	; 0x1662 <qtm_acquisition_process+0x2d2>
    1660:	73 cf       	rjmp	.-282    	; 0x1548 <qtm_acquisition_process+0x1b8>
    1662:	d1 cf       	rjmp	.-94     	; 0x1606 <qtm_acquisition_process+0x276>
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	cf cf       	rjmp	.-98     	; 0x1606 <qtm_acquisition_process+0x276>
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	7f 90       	pop	r7
    1682:	6f 90       	pop	r6
    1684:	5f 90       	pop	r5
    1686:	4f 90       	pop	r4
    1688:	3f 90       	pop	r3
    168a:	08 95       	ret

0000168c <qtm_ptc_init_acquisition_module>:
    168c:	cf 93       	push	r28
    168e:	dc 01       	movw	r26, r24
    1690:	89 2b       	or	r24, r25
    1692:	79 f1       	breq	.+94     	; 0x16f2 <qtm_ptc_init_acquisition_module+0x66>
    1694:	ed 91       	ld	r30, X+
    1696:	fc 91       	ld	r31, X
    1698:	11 97       	sbiw	r26, 0x01	; 1
    169a:	60 81       	ld	r22, Z
    169c:	71 81       	ldd	r23, Z+1	; 0x01
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	26 17       	cp	r18, r22
    16aa:	37 07       	cpc	r19, r23
    16ac:	79 f0       	breq	.+30     	; 0x16cc <qtm_ptc_init_acquisition_module+0x40>
    16ae:	12 96       	adiw	r26, 0x02	; 2
    16b0:	ed 91       	ld	r30, X+
    16b2:	fc 91       	ld	r31, X
    16b4:	13 97       	sbiw	r26, 0x03	; 3
    16b6:	e4 0f       	add	r30, r20
    16b8:	f5 1f       	adc	r31, r21
    16ba:	c0 81       	ld	r28, Z
    16bc:	81 81       	ldd	r24, Z+1	; 0x01
    16be:	8c 2b       	or	r24, r28
    16c0:	98 2b       	or	r25, r24
    16c2:	2f 5f       	subi	r18, 0xFF	; 255
    16c4:	3f 4f       	sbci	r19, 0xFF	; 255
    16c6:	4a 5f       	subi	r20, 0xFA	; 250
    16c8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ca:	ee cf       	rjmp	.-36     	; 0x16a8 <qtm_ptc_init_acquisition_module+0x1c>
    16cc:	99 23       	and	r25, r25
    16ce:	99 f0       	breq	.+38     	; 0x16f6 <qtm_ptc_init_acquisition_module+0x6a>
    16d0:	80 91 50 3e 	lds	r24, 0x3E50	; 0x803e50 <touch_seq_lib_state>
    16d4:	81 11       	cpse	r24, r1
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <qtm_ptc_init_acquisition_module+0x58>
    16d8:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <gain_setting_int_cap+0x7f6a82>
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	80 93 50 3e 	sts	0x3E50, r24	; 0x803e50 <touch_seq_lib_state>
    16e2:	05 c0       	rjmp	.+10     	; 0x16ee <qtm_ptc_init_acquisition_module+0x62>
    16e4:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <gain_setting_int_cap+0x7f6a82>
    16e8:	98 2b       	or	r25, r24
    16ea:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <gain_setting_int_cap+0x7f6a82>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <qtm_ptc_init_acquisition_module+0x6c>
    16f2:	8b e0       	ldi	r24, 0x0B	; 11
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <qtm_ptc_init_acquisition_module+0x6c>
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <qtm_ptc_qtlib_assign_signal_memory>:
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	31 f0       	breq	.+12     	; 0x170c <qtm_ptc_qtlib_assign_signal_memory+0x10>
    1700:	80 93 8f 3e 	sts	0x3E8F, r24	; 0x803e8f <qtm_raw_data_measurements_ptr>
    1704:	90 93 90 3e 	sts	0x3E90, r25	; 0x803e90 <qtm_raw_data_measurements_ptr+0x1>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	08 95       	ret
    170c:	8b e0       	ldi	r24, 0x0B	; 11
    170e:	08 95       	ret

00001710 <qtm_ptc_start_measurement_seq>:
    1710:	61 15       	cp	r22, r1
    1712:	71 05       	cpc	r23, r1
    1714:	91 f1       	breq	.+100    	; 0x177a <qtm_ptc_start_measurement_seq+0x6a>
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	81 f1       	breq	.+96     	; 0x177a <qtm_ptc_start_measurement_seq+0x6a>
    171a:	20 91 50 3e 	lds	r18, 0x3E50	; 0x803e50 <touch_seq_lib_state>
    171e:	22 23       	and	r18, r18
    1720:	71 f1       	breq	.+92     	; 0x177e <qtm_ptc_start_measurement_seq+0x6e>
    1722:	24 30       	cpi	r18, 0x04	; 4
    1724:	71 f1       	breq	.+92     	; 0x1782 <qtm_ptc_start_measurement_seq+0x72>
    1726:	80 93 8d 3e 	sts	0x3E8D, r24	; 0x803e8d <qtm_acquisition_control_working_set_ptr>
    172a:	90 93 8e 3e 	sts	0x3E8E, r25	; 0x803e8e <qtm_acquisition_control_working_set_ptr+0x1>
    172e:	60 93 4e 3e 	sts	0x3E4E, r22	; 0x803e4e <ptc_seq_measure_complete_pointer>
    1732:	70 93 4f 3e 	sts	0x3E4F, r23	; 0x803e4f <ptc_seq_measure_complete_pointer+0x1>
    1736:	20 ec       	ldi	r18, 0xC0	; 192
    1738:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f6a78>
    173c:	dc 01       	movw	r26, r24
    173e:	ed 91       	ld	r30, X+
    1740:	fc 91       	ld	r31, X
    1742:	22 81       	ldd	r18, Z+2	; 0x02
    1744:	20 34       	cpi	r18, 0x40	; 64
    1746:	21 f4       	brne	.+8      	; 0x1750 <qtm_ptc_start_measurement_seq+0x40>
    1748:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f6a78>
    174c:	20 62       	ori	r18, 0x20	; 32
    174e:	05 c0       	rjmp	.+10     	; 0x175a <qtm_ptc_start_measurement_seq+0x4a>
    1750:	20 38       	cpi	r18, 0x80	; 128
    1752:	41 f4       	brne	.+16     	; 0x1764 <qtm_ptc_start_measurement_seq+0x54>
    1754:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f6a78>
    1758:	28 62       	ori	r18, 0x28	; 40
    175a:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f6a78>
    175e:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <gain_setting_int_cap+0x7f6a7e>
    1762:	13 c0       	rjmp	.+38     	; 0x178a <qtm_ptc_start_measurement_seq+0x7a>
    1764:	21 38       	cpi	r18, 0x81	; 129
    1766:	79 f4       	brne	.+30     	; 0x1786 <qtm_ptc_start_measurement_seq+0x76>
    1768:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f6a78>
    176c:	28 62       	ori	r18, 0x28	; 40
    176e:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f6a78>
    1772:	26 e8       	ldi	r18, 0x86	; 134
    1774:	20 93 1e 06 	sts	0x061E, r18	; 0x80061e <gain_setting_int_cap+0x7f6a7e>
    1778:	08 c0       	rjmp	.+16     	; 0x178a <qtm_ptc_start_measurement_seq+0x7a>
    177a:	8b e0       	ldi	r24, 0x0B	; 11
    177c:	08 95       	ret
    177e:	83 e0       	ldi	r24, 0x03	; 3
    1780:	08 95       	ret
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	08 95       	ret
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	08 95       	ret
    178a:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <gain_setting_int_cap+0x7f6a60>
    178e:	dc 01       	movw	r26, r24
    1790:	ed 91       	ld	r30, X+
    1792:	fc 91       	ld	r31, X
    1794:	84 81       	ldd	r24, Z+4	; 0x04
    1796:	80 31       	cpi	r24, 0x10	; 16
    1798:	08 f0       	brcs	.+2      	; 0x179c <qtm_ptc_start_measurement_seq+0x8c>
    179a:	80 e1       	ldi	r24, 0x10	; 16
    179c:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <gain_setting_int_cap+0x7f6a63>
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <gain_setting_int_cap+0x7f6a6b>
    17a6:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <gain_setting_int_cap+0x7f6a6a>
    17aa:	80 93 3c 3e 	sts	0x3E3C, r24	; 0x803e3c <qtm_which_mode_current>
    17ae:	10 92 51 3e 	sts	0x3E51, r1	; 0x803e51 <current_measure_channel>
    17b2:	10 92 52 3e 	sts	0x3E52, r1	; 0x803e52 <current_measure_channel+0x1>
    17b6:	35 dd       	rcall	.-1430   	; 0x1222 <select_next_channel_to_measure>
    17b8:	81 11       	cpse	r24, r1
    17ba:	0a c0       	rjmp	.+20     	; 0x17d0 <qtm_ptc_start_measurement_seq+0xc0>
    17bc:	84 e0       	ldi	r24, 0x04	; 4
    17be:	80 93 50 3e 	sts	0x3E50, r24	; 0x803e50 <touch_seq_lib_state>
    17c2:	80 91 51 3e 	lds	r24, 0x3E51	; 0x803e51 <current_measure_channel>
    17c6:	90 91 52 3e 	lds	r25, 0x3E52	; 0x803e52 <current_measure_channel+0x1>
    17ca:	5e dd       	rcall	.-1348   	; 0x1288 <qtm_measure_node>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	08 95       	ret
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	80 93 50 3e 	sts	0x3E50, r24	; 0x803e50 <touch_seq_lib_state>
    17d6:	08 95       	ret

000017d8 <qtm_enable_sensor_node>:
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	c9 f0       	breq	.+50     	; 0x180e <qtm_enable_sensor_node+0x36>
    17dc:	dc 01       	movw	r26, r24
    17de:	ed 91       	ld	r30, X+
    17e0:	fc 91       	ld	r31, X
    17e2:	11 97       	sbiw	r26, 0x01	; 1
    17e4:	20 81       	ld	r18, Z
    17e6:	31 81       	ldd	r19, Z+1	; 0x01
    17e8:	26 17       	cp	r18, r22
    17ea:	37 07       	cpc	r19, r23
    17ec:	90 f0       	brcs	.+36     	; 0x1812 <qtm_enable_sensor_node+0x3a>
    17ee:	45 e0       	ldi	r20, 0x05	; 5
    17f0:	46 9f       	mul	r20, r22
    17f2:	90 01       	movw	r18, r0
    17f4:	47 9f       	mul	r20, r23
    17f6:	30 0d       	add	r19, r0
    17f8:	11 24       	eor	r1, r1
    17fa:	14 96       	adiw	r26, 0x04	; 4
    17fc:	ed 91       	ld	r30, X+
    17fe:	fc 91       	ld	r31, X
    1800:	15 97       	sbiw	r26, 0x05	; 5
    1802:	e2 0f       	add	r30, r18
    1804:	f3 1f       	adc	r31, r19
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	80 83       	st	Z, r24
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	08 95       	ret
    180e:	8b e0       	ldi	r24, 0x0B	; 11
    1810:	08 95       	ret
    1812:	82 e0       	ldi	r24, 0x02	; 2
    1814:	08 95       	ret

00001816 <qtm_calibrate_sensor_node>:
    1816:	fc 01       	movw	r30, r24
    1818:	89 2b       	or	r24, r25
    181a:	d1 f1       	breq	.+116    	; 0x1890 <qtm_calibrate_sensor_node+0x7a>
    181c:	a0 81       	ld	r26, Z
    181e:	b1 81       	ldd	r27, Z+1	; 0x01
    1820:	8d 91       	ld	r24, X+
    1822:	9c 91       	ld	r25, X
    1824:	11 97       	sbiw	r26, 0x01	; 1
    1826:	86 17       	cp	r24, r22
    1828:	97 07       	cpc	r25, r23
    182a:	a0 f1       	brcs	.+104    	; 0x1894 <qtm_calibrate_sensor_node+0x7e>
    182c:	12 96       	adiw	r26, 0x02	; 2
    182e:	9c 91       	ld	r25, X
    1830:	04 80       	ldd	r0, Z+4	; 0x04
    1832:	f5 81       	ldd	r31, Z+5	; 0x05
    1834:	e0 2d       	mov	r30, r0
    1836:	90 34       	cpi	r25, 0x40	; 64
    1838:	59 f4       	brne	.+22     	; 0x1850 <qtm_calibrate_sensor_node+0x3a>
    183a:	85 e0       	ldi	r24, 0x05	; 5
    183c:	86 9f       	mul	r24, r22
    183e:	d0 01       	movw	r26, r0
    1840:	87 9f       	mul	r24, r23
    1842:	b0 0d       	add	r27, r0
    1844:	11 24       	eor	r1, r1
    1846:	ae 0f       	add	r26, r30
    1848:	bf 1f       	adc	r27, r31
    184a:	84 e3       	ldi	r24, 0x34	; 52
    184c:	92 e0       	ldi	r25, 0x02	; 2
    184e:	0d c0       	rjmp	.+26     	; 0x186a <qtm_calibrate_sensor_node+0x54>
    1850:	90 58       	subi	r25, 0x80	; 128
    1852:	92 30       	cpi	r25, 0x02	; 2
    1854:	80 f4       	brcc	.+32     	; 0x1876 <qtm_calibrate_sensor_node+0x60>
    1856:	85 e0       	ldi	r24, 0x05	; 5
    1858:	86 9f       	mul	r24, r22
    185a:	d0 01       	movw	r26, r0
    185c:	87 9f       	mul	r24, r23
    185e:	b0 0d       	add	r27, r0
    1860:	11 24       	eor	r1, r1
    1862:	ae 0f       	add	r26, r30
    1864:	bf 1f       	adc	r27, r31
    1866:	87 e6       	ldi	r24, 0x67	; 103
    1868:	95 e0       	ldi	r25, 0x05	; 5
    186a:	13 96       	adiw	r26, 0x03	; 3
    186c:	8d 93       	st	X+, r24
    186e:	9c 93       	st	X, r25
    1870:	14 97       	sbiw	r26, 0x04	; 4
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <qtm_calibrate_sensor_node+0x62>
    1876:	82 e0       	ldi	r24, 0x02	; 2
    1878:	95 e0       	ldi	r25, 0x05	; 5
    187a:	96 9f       	mul	r25, r22
    187c:	90 01       	movw	r18, r0
    187e:	97 9f       	mul	r25, r23
    1880:	30 0d       	add	r19, r0
    1882:	11 24       	eor	r1, r1
    1884:	e2 0f       	add	r30, r18
    1886:	f3 1f       	adc	r31, r19
    1888:	90 81       	ld	r25, Z
    188a:	92 60       	ori	r25, 0x02	; 2
    188c:	90 83       	st	Z, r25
    188e:	08 95       	ret
    1890:	8b e0       	ldi	r24, 0x0B	; 11
    1892:	08 95       	ret
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	08 95       	ret

00001898 <qtm_t81x_ptc_handler_eoc>:
    1898:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <gain_setting_int_cap+0x7f6a60>
    189c:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <gain_setting_int_cap+0x7f6a70>
    18a0:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <gain_setting_int_cap+0x7f6a71>
    18a4:	80 91 51 3e 	lds	r24, 0x3E51	; 0x803e51 <current_measure_channel>
    18a8:	90 91 52 3e 	lds	r25, 0x3E52	; 0x803e52 <current_measure_channel+0x1>
    18ac:	9c 01       	movw	r18, r24
    18ae:	22 0f       	add	r18, r18
    18b0:	33 1f       	adc	r19, r19
    18b2:	e0 91 8f 3e 	lds	r30, 0x3E8F	; 0x803e8f <qtm_raw_data_measurements_ptr>
    18b6:	f0 91 90 3e 	lds	r31, 0x3E90	; 0x803e90 <qtm_raw_data_measurements_ptr+0x1>
    18ba:	e2 0f       	add	r30, r18
    18bc:	f3 1f       	adc	r31, r19
    18be:	40 83       	st	Z, r20
    18c0:	51 83       	std	Z+1, r21	; 0x01
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <current_measure_channel>
    18c8:	90 93 52 3e 	sts	0x3E52, r25	; 0x803e52 <current_measure_channel+0x1>
    18cc:	aa dc       	rcall	.-1708   	; 0x1222 <select_next_channel_to_measure>
    18ce:	81 11       	cpse	r24, r1
    18d0:	08 c0       	rjmp	.+16     	; 0x18e2 <qtm_t81x_ptc_handler_eoc+0x4a>
    18d2:	84 e0       	ldi	r24, 0x04	; 4
    18d4:	80 93 50 3e 	sts	0x3E50, r24	; 0x803e50 <touch_seq_lib_state>
    18d8:	80 91 51 3e 	lds	r24, 0x3E51	; 0x803e51 <current_measure_channel>
    18dc:	90 91 52 3e 	lds	r25, 0x3E52	; 0x803e52 <current_measure_channel+0x1>
    18e0:	d3 cc       	rjmp	.-1626   	; 0x1288 <qtm_measure_node>
    18e2:	e0 91 4e 3e 	lds	r30, 0x3E4E	; 0x803e4e <ptc_seq_measure_complete_pointer>
    18e6:	f0 91 4f 3e 	lds	r31, 0x3E4F	; 0x803e4f <ptc_seq_measure_complete_pointer+0x1>
    18ea:	09 94       	ijmp

000018ec <__divsf3>:
    18ec:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__divsf3x>
    18f0:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_round>
    18f4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__fp_pscB>
    18f8:	58 f0       	brcs	.+22     	; 0x1910 <__divsf3+0x24>
    18fa:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__fp_pscA>
    18fe:	40 f0       	brcs	.+16     	; 0x1910 <__divsf3+0x24>
    1900:	29 f4       	brne	.+10     	; 0x190c <__divsf3+0x20>
    1902:	5f 3f       	cpi	r21, 0xFF	; 255
    1904:	29 f0       	breq	.+10     	; 0x1910 <__divsf3+0x24>
    1906:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__fp_inf>
    190a:	51 11       	cpse	r21, r1
    190c:	0c 94 9f 0d 	jmp	0x1b3e	; 0x1b3e <__fp_szero>
    1910:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__fp_nan>

00001914 <__divsf3x>:
    1914:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__fp_split3>
    1918:	68 f3       	brcs	.-38     	; 0x18f4 <__divsf3+0x8>

0000191a <__divsf3_pse>:
    191a:	99 23       	and	r25, r25
    191c:	b1 f3       	breq	.-20     	; 0x190a <__divsf3+0x1e>
    191e:	55 23       	and	r21, r21
    1920:	91 f3       	breq	.-28     	; 0x1906 <__divsf3+0x1a>
    1922:	95 1b       	sub	r25, r21
    1924:	55 0b       	sbc	r21, r21
    1926:	bb 27       	eor	r27, r27
    1928:	aa 27       	eor	r26, r26
    192a:	62 17       	cp	r22, r18
    192c:	73 07       	cpc	r23, r19
    192e:	84 07       	cpc	r24, r20
    1930:	38 f0       	brcs	.+14     	; 0x1940 <__divsf3_pse+0x26>
    1932:	9f 5f       	subi	r25, 0xFF	; 255
    1934:	5f 4f       	sbci	r21, 0xFF	; 255
    1936:	22 0f       	add	r18, r18
    1938:	33 1f       	adc	r19, r19
    193a:	44 1f       	adc	r20, r20
    193c:	aa 1f       	adc	r26, r26
    193e:	a9 f3       	breq	.-22     	; 0x192a <__divsf3_pse+0x10>
    1940:	35 d0       	rcall	.+106    	; 0x19ac <__divsf3_pse+0x92>
    1942:	0e 2e       	mov	r0, r30
    1944:	3a f0       	brmi	.+14     	; 0x1954 <__divsf3_pse+0x3a>
    1946:	e0 e8       	ldi	r30, 0x80	; 128
    1948:	32 d0       	rcall	.+100    	; 0x19ae <__divsf3_pse+0x94>
    194a:	91 50       	subi	r25, 0x01	; 1
    194c:	50 40       	sbci	r21, 0x00	; 0
    194e:	e6 95       	lsr	r30
    1950:	00 1c       	adc	r0, r0
    1952:	ca f7       	brpl	.-14     	; 0x1946 <__divsf3_pse+0x2c>
    1954:	2b d0       	rcall	.+86     	; 0x19ac <__divsf3_pse+0x92>
    1956:	fe 2f       	mov	r31, r30
    1958:	29 d0       	rcall	.+82     	; 0x19ac <__divsf3_pse+0x92>
    195a:	66 0f       	add	r22, r22
    195c:	77 1f       	adc	r23, r23
    195e:	88 1f       	adc	r24, r24
    1960:	bb 1f       	adc	r27, r27
    1962:	26 17       	cp	r18, r22
    1964:	37 07       	cpc	r19, r23
    1966:	48 07       	cpc	r20, r24
    1968:	ab 07       	cpc	r26, r27
    196a:	b0 e8       	ldi	r27, 0x80	; 128
    196c:	09 f0       	breq	.+2      	; 0x1970 <__divsf3_pse+0x56>
    196e:	bb 0b       	sbc	r27, r27
    1970:	80 2d       	mov	r24, r0
    1972:	bf 01       	movw	r22, r30
    1974:	ff 27       	eor	r31, r31
    1976:	93 58       	subi	r25, 0x83	; 131
    1978:	5f 4f       	sbci	r21, 0xFF	; 255
    197a:	3a f0       	brmi	.+14     	; 0x198a <__divsf3_pse+0x70>
    197c:	9e 3f       	cpi	r25, 0xFE	; 254
    197e:	51 05       	cpc	r21, r1
    1980:	78 f0       	brcs	.+30     	; 0x19a0 <__divsf3_pse+0x86>
    1982:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__fp_inf>
    1986:	0c 94 9f 0d 	jmp	0x1b3e	; 0x1b3e <__fp_szero>
    198a:	5f 3f       	cpi	r21, 0xFF	; 255
    198c:	e4 f3       	brlt	.-8      	; 0x1986 <__divsf3_pse+0x6c>
    198e:	98 3e       	cpi	r25, 0xE8	; 232
    1990:	d4 f3       	brlt	.-12     	; 0x1986 <__divsf3_pse+0x6c>
    1992:	86 95       	lsr	r24
    1994:	77 95       	ror	r23
    1996:	67 95       	ror	r22
    1998:	b7 95       	ror	r27
    199a:	f7 95       	ror	r31
    199c:	9f 5f       	subi	r25, 0xFF	; 255
    199e:	c9 f7       	brne	.-14     	; 0x1992 <__divsf3_pse+0x78>
    19a0:	88 0f       	add	r24, r24
    19a2:	91 1d       	adc	r25, r1
    19a4:	96 95       	lsr	r25
    19a6:	87 95       	ror	r24
    19a8:	97 f9       	bld	r25, 7
    19aa:	08 95       	ret
    19ac:	e1 e0       	ldi	r30, 0x01	; 1
    19ae:	66 0f       	add	r22, r22
    19b0:	77 1f       	adc	r23, r23
    19b2:	88 1f       	adc	r24, r24
    19b4:	bb 1f       	adc	r27, r27
    19b6:	62 17       	cp	r22, r18
    19b8:	73 07       	cpc	r23, r19
    19ba:	84 07       	cpc	r24, r20
    19bc:	ba 07       	cpc	r27, r26
    19be:	20 f0       	brcs	.+8      	; 0x19c8 <__divsf3_pse+0xae>
    19c0:	62 1b       	sub	r22, r18
    19c2:	73 0b       	sbc	r23, r19
    19c4:	84 0b       	sbc	r24, r20
    19c6:	ba 0b       	sbc	r27, r26
    19c8:	ee 1f       	adc	r30, r30
    19ca:	88 f7       	brcc	.-30     	; 0x19ae <__divsf3_pse+0x94>
    19cc:	e0 95       	com	r30
    19ce:	08 95       	ret

000019d0 <__fixunssfsi>:
    19d0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__fp_splitA>
    19d4:	88 f0       	brcs	.+34     	; 0x19f8 <__fixunssfsi+0x28>
    19d6:	9f 57       	subi	r25, 0x7F	; 127
    19d8:	98 f0       	brcs	.+38     	; 0x1a00 <__fixunssfsi+0x30>
    19da:	b9 2f       	mov	r27, r25
    19dc:	99 27       	eor	r25, r25
    19de:	b7 51       	subi	r27, 0x17	; 23
    19e0:	b0 f0       	brcs	.+44     	; 0x1a0e <__fixunssfsi+0x3e>
    19e2:	e1 f0       	breq	.+56     	; 0x1a1c <__fixunssfsi+0x4c>
    19e4:	66 0f       	add	r22, r22
    19e6:	77 1f       	adc	r23, r23
    19e8:	88 1f       	adc	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	1a f0       	brmi	.+6      	; 0x19f4 <__fixunssfsi+0x24>
    19ee:	ba 95       	dec	r27
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__fixunssfsi+0x14>
    19f2:	14 c0       	rjmp	.+40     	; 0x1a1c <__fixunssfsi+0x4c>
    19f4:	b1 30       	cpi	r27, 0x01	; 1
    19f6:	91 f0       	breq	.+36     	; 0x1a1c <__fixunssfsi+0x4c>
    19f8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__fp_zero>
    19fc:	b1 e0       	ldi	r27, 0x01	; 1
    19fe:	08 95       	ret
    1a00:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <__fp_zero>
    1a04:	67 2f       	mov	r22, r23
    1a06:	78 2f       	mov	r23, r24
    1a08:	88 27       	eor	r24, r24
    1a0a:	b8 5f       	subi	r27, 0xF8	; 248
    1a0c:	39 f0       	breq	.+14     	; 0x1a1c <__fixunssfsi+0x4c>
    1a0e:	b9 3f       	cpi	r27, 0xF9	; 249
    1a10:	cc f3       	brlt	.-14     	; 0x1a04 <__fixunssfsi+0x34>
    1a12:	86 95       	lsr	r24
    1a14:	77 95       	ror	r23
    1a16:	67 95       	ror	r22
    1a18:	b3 95       	inc	r27
    1a1a:	d9 f7       	brne	.-10     	; 0x1a12 <__fixunssfsi+0x42>
    1a1c:	3e f4       	brtc	.+14     	; 0x1a2c <__fixunssfsi+0x5c>
    1a1e:	90 95       	com	r25
    1a20:	80 95       	com	r24
    1a22:	70 95       	com	r23
    1a24:	61 95       	neg	r22
    1a26:	7f 4f       	sbci	r23, 0xFF	; 255
    1a28:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2c:	08 95       	ret

00001a2e <__floatunsisf>:
    1a2e:	e8 94       	clt
    1a30:	09 c0       	rjmp	.+18     	; 0x1a44 <__floatsisf+0x12>

00001a32 <__floatsisf>:
    1a32:	97 fb       	bst	r25, 7
    1a34:	3e f4       	brtc	.+14     	; 0x1a44 <__floatsisf+0x12>
    1a36:	90 95       	com	r25
    1a38:	80 95       	com	r24
    1a3a:	70 95       	com	r23
    1a3c:	61 95       	neg	r22
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	8f 4f       	sbci	r24, 0xFF	; 255
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	99 23       	and	r25, r25
    1a46:	a9 f0       	breq	.+42     	; 0x1a72 <__floatsisf+0x40>
    1a48:	f9 2f       	mov	r31, r25
    1a4a:	96 e9       	ldi	r25, 0x96	; 150
    1a4c:	bb 27       	eor	r27, r27
    1a4e:	93 95       	inc	r25
    1a50:	f6 95       	lsr	r31
    1a52:	87 95       	ror	r24
    1a54:	77 95       	ror	r23
    1a56:	67 95       	ror	r22
    1a58:	b7 95       	ror	r27
    1a5a:	f1 11       	cpse	r31, r1
    1a5c:	f8 cf       	rjmp	.-16     	; 0x1a4e <__floatsisf+0x1c>
    1a5e:	fa f4       	brpl	.+62     	; 0x1a9e <__floatsisf+0x6c>
    1a60:	bb 0f       	add	r27, r27
    1a62:	11 f4       	brne	.+4      	; 0x1a68 <__floatsisf+0x36>
    1a64:	60 ff       	sbrs	r22, 0
    1a66:	1b c0       	rjmp	.+54     	; 0x1a9e <__floatsisf+0x6c>
    1a68:	6f 5f       	subi	r22, 0xFF	; 255
    1a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a70:	16 c0       	rjmp	.+44     	; 0x1a9e <__floatsisf+0x6c>
    1a72:	88 23       	and	r24, r24
    1a74:	11 f0       	breq	.+4      	; 0x1a7a <__floatsisf+0x48>
    1a76:	96 e9       	ldi	r25, 0x96	; 150
    1a78:	11 c0       	rjmp	.+34     	; 0x1a9c <__floatsisf+0x6a>
    1a7a:	77 23       	and	r23, r23
    1a7c:	21 f0       	breq	.+8      	; 0x1a86 <__floatsisf+0x54>
    1a7e:	9e e8       	ldi	r25, 0x8E	; 142
    1a80:	87 2f       	mov	r24, r23
    1a82:	76 2f       	mov	r23, r22
    1a84:	05 c0       	rjmp	.+10     	; 0x1a90 <__floatsisf+0x5e>
    1a86:	66 23       	and	r22, r22
    1a88:	71 f0       	breq	.+28     	; 0x1aa6 <__floatsisf+0x74>
    1a8a:	96 e8       	ldi	r25, 0x86	; 134
    1a8c:	86 2f       	mov	r24, r22
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	2a f0       	brmi	.+10     	; 0x1a9e <__floatsisf+0x6c>
    1a94:	9a 95       	dec	r25
    1a96:	66 0f       	add	r22, r22
    1a98:	77 1f       	adc	r23, r23
    1a9a:	88 1f       	adc	r24, r24
    1a9c:	da f7       	brpl	.-10     	; 0x1a94 <__floatsisf+0x62>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	96 95       	lsr	r25
    1aa2:	87 95       	ror	r24
    1aa4:	97 f9       	bld	r25, 7
    1aa6:	08 95       	ret

00001aa8 <__fp_inf>:
    1aa8:	97 f9       	bld	r25, 7
    1aaa:	9f 67       	ori	r25, 0x7F	; 127
    1aac:	80 e8       	ldi	r24, 0x80	; 128
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	08 95       	ret

00001ab4 <__fp_nan>:
    1ab4:	9f ef       	ldi	r25, 0xFF	; 255
    1ab6:	80 ec       	ldi	r24, 0xC0	; 192
    1ab8:	08 95       	ret

00001aba <__fp_pscA>:
    1aba:	00 24       	eor	r0, r0
    1abc:	0a 94       	dec	r0
    1abe:	16 16       	cp	r1, r22
    1ac0:	17 06       	cpc	r1, r23
    1ac2:	18 06       	cpc	r1, r24
    1ac4:	09 06       	cpc	r0, r25
    1ac6:	08 95       	ret

00001ac8 <__fp_pscB>:
    1ac8:	00 24       	eor	r0, r0
    1aca:	0a 94       	dec	r0
    1acc:	12 16       	cp	r1, r18
    1ace:	13 06       	cpc	r1, r19
    1ad0:	14 06       	cpc	r1, r20
    1ad2:	05 06       	cpc	r0, r21
    1ad4:	08 95       	ret

00001ad6 <__fp_round>:
    1ad6:	09 2e       	mov	r0, r25
    1ad8:	03 94       	inc	r0
    1ada:	00 0c       	add	r0, r0
    1adc:	11 f4       	brne	.+4      	; 0x1ae2 <__fp_round+0xc>
    1ade:	88 23       	and	r24, r24
    1ae0:	52 f0       	brmi	.+20     	; 0x1af6 <__fp_round+0x20>
    1ae2:	bb 0f       	add	r27, r27
    1ae4:	40 f4       	brcc	.+16     	; 0x1af6 <__fp_round+0x20>
    1ae6:	bf 2b       	or	r27, r31
    1ae8:	11 f4       	brne	.+4      	; 0x1aee <__fp_round+0x18>
    1aea:	60 ff       	sbrs	r22, 0
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <__fp_round+0x20>
    1aee:	6f 5f       	subi	r22, 0xFF	; 255
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	8f 4f       	sbci	r24, 0xFF	; 255
    1af4:	9f 4f       	sbci	r25, 0xFF	; 255
    1af6:	08 95       	ret

00001af8 <__fp_split3>:
    1af8:	57 fd       	sbrc	r21, 7
    1afa:	90 58       	subi	r25, 0x80	; 128
    1afc:	44 0f       	add	r20, r20
    1afe:	55 1f       	adc	r21, r21
    1b00:	59 f0       	breq	.+22     	; 0x1b18 <__fp_splitA+0x10>
    1b02:	5f 3f       	cpi	r21, 0xFF	; 255
    1b04:	71 f0       	breq	.+28     	; 0x1b22 <__fp_splitA+0x1a>
    1b06:	47 95       	ror	r20

00001b08 <__fp_splitA>:
    1b08:	88 0f       	add	r24, r24
    1b0a:	97 fb       	bst	r25, 7
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	61 f0       	breq	.+24     	; 0x1b28 <__fp_splitA+0x20>
    1b10:	9f 3f       	cpi	r25, 0xFF	; 255
    1b12:	79 f0       	breq	.+30     	; 0x1b32 <__fp_splitA+0x2a>
    1b14:	87 95       	ror	r24
    1b16:	08 95       	ret
    1b18:	12 16       	cp	r1, r18
    1b1a:	13 06       	cpc	r1, r19
    1b1c:	14 06       	cpc	r1, r20
    1b1e:	55 1f       	adc	r21, r21
    1b20:	f2 cf       	rjmp	.-28     	; 0x1b06 <__fp_split3+0xe>
    1b22:	46 95       	lsr	r20
    1b24:	f1 df       	rcall	.-30     	; 0x1b08 <__fp_splitA>
    1b26:	08 c0       	rjmp	.+16     	; 0x1b38 <__fp_splitA+0x30>
    1b28:	16 16       	cp	r1, r22
    1b2a:	17 06       	cpc	r1, r23
    1b2c:	18 06       	cpc	r1, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	f1 cf       	rjmp	.-30     	; 0x1b14 <__fp_splitA+0xc>
    1b32:	86 95       	lsr	r24
    1b34:	71 05       	cpc	r23, r1
    1b36:	61 05       	cpc	r22, r1
    1b38:	08 94       	sec
    1b3a:	08 95       	ret

00001b3c <__fp_zero>:
    1b3c:	e8 94       	clt

00001b3e <__fp_szero>:
    1b3e:	bb 27       	eor	r27, r27
    1b40:	66 27       	eor	r22, r22
    1b42:	77 27       	eor	r23, r23
    1b44:	cb 01       	movw	r24, r22
    1b46:	97 f9       	bld	r25, 7
    1b48:	08 95       	ret

00001b4a <__gesf2>:
    1b4a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__fp_cmp>
    1b4e:	08 f4       	brcc	.+2      	; 0x1b52 <__gesf2+0x8>
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	08 95       	ret

00001b54 <__fp_cmp>:
    1b54:	99 0f       	add	r25, r25
    1b56:	00 08       	sbc	r0, r0
    1b58:	55 0f       	add	r21, r21
    1b5a:	aa 0b       	sbc	r26, r26
    1b5c:	e0 e8       	ldi	r30, 0x80	; 128
    1b5e:	fe ef       	ldi	r31, 0xFE	; 254
    1b60:	16 16       	cp	r1, r22
    1b62:	17 06       	cpc	r1, r23
    1b64:	e8 07       	cpc	r30, r24
    1b66:	f9 07       	cpc	r31, r25
    1b68:	c0 f0       	brcs	.+48     	; 0x1b9a <__fp_cmp+0x46>
    1b6a:	12 16       	cp	r1, r18
    1b6c:	13 06       	cpc	r1, r19
    1b6e:	e4 07       	cpc	r30, r20
    1b70:	f5 07       	cpc	r31, r21
    1b72:	98 f0       	brcs	.+38     	; 0x1b9a <__fp_cmp+0x46>
    1b74:	62 1b       	sub	r22, r18
    1b76:	73 0b       	sbc	r23, r19
    1b78:	84 0b       	sbc	r24, r20
    1b7a:	95 0b       	sbc	r25, r21
    1b7c:	39 f4       	brne	.+14     	; 0x1b8c <__fp_cmp+0x38>
    1b7e:	0a 26       	eor	r0, r26
    1b80:	61 f0       	breq	.+24     	; 0x1b9a <__fp_cmp+0x46>
    1b82:	23 2b       	or	r18, r19
    1b84:	24 2b       	or	r18, r20
    1b86:	25 2b       	or	r18, r21
    1b88:	21 f4       	brne	.+8      	; 0x1b92 <__fp_cmp+0x3e>
    1b8a:	08 95       	ret
    1b8c:	0a 26       	eor	r0, r26
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <__fp_cmp+0x3e>
    1b90:	a1 40       	sbci	r26, 0x01	; 1
    1b92:	a6 95       	lsr	r26
    1b94:	8f ef       	ldi	r24, 0xFF	; 255
    1b96:	81 1d       	adc	r24, r1
    1b98:	81 1d       	adc	r24, r1
    1b9a:	08 95       	ret

00001b9c <_exit>:
    1b9c:	f8 94       	cli

00001b9e <__stop_program>:
    1b9e:	ff cf       	rjmp	.-2      	; 0x1b9e <__stop_program>
